from flask import Flask, render_template, request, redirect, url_for, session, flash
import pandas as pd
import os
from werkzeug.utils import secure_filename
import pyodbc
import datetime
from dotenv import load_dotenv
import google.generativeai as genai
from functools import lru_cache
import numpy as np
from datetime import date
import shap
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


# ==========================================
# C·∫•u h√¨nh Flask
# ==========================================
load_dotenv()
app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY", "cvdapp-secret-key")

# ==========================================
# K·∫øt n·ªëi SQL Server
# ==========================================
def get_connection():
    return pyodbc.connect(
        "DRIVER={SQL Server};"
        "SERVER=HKT;"
        "DATABASE=CVD_App;"
        "UID=sa;"
        "PWD=123"
    )

# ==========================================
# C·∫•u h√¨nh Gemini AI
# ==========================================
MODEL_NAME = "models/gemini-2.5-flash-lite"
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

@lru_cache(maxsize=128)
def get_ai_advice_cached(prompt: str) -> str:
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y l·ªùi khuy√™n AI: {e}"

# ==========================================
# Load m√¥ h√¨nh XGBoost
# ==========================================
xgb_model = None
try:
    import xgboost as xgb
    MODEL_PATH = "xgb_T11_Final.json"
    if os.path.exists(MODEL_PATH):
        xgb_model = xgb.XGBClassifier()
        xgb_model.load_model(MODEL_PATH)
        print("‚úÖ M√¥ h√¨nh XGBoost ƒë√£ load th√†nh c√¥ng.")
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh, s·∫Ω d√πng heuristic.")
except Exception as e:
    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load m√¥ h√¨nh XGBoost: {e}")
    xgb_model = None

# ==========================================
# C·∫•u h√¨nh upload
# ==========================================
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# ==========================================
# ƒêƒÉng k√Ω
# ==========================================
@app.route('/register', methods=['GET', 'POST'])
def register():
    today = date.today().strftime('%Y-%m-%d')


    if request.method == 'POST':
        ho_ten = request.form.get('ho_ten')
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh')
        email = request.form.get('email')
        mat_khau = request.form.get('mat_khau')

        role = 'patient'   # M·∫∑c ƒë·ªãnh l√† b·ªánh nh√¢n

        conn = get_connection()
        cur = conn.cursor()

        # Ki·ªÉm tra email tr√πng
        cur.execute("SELECT ID FROM NguoiDung WHERE Email=?", (email,))
        if cur.fetchone():
            conn.close()
            return render_template('register.html', error="Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!", today=today)

        try:
            cur.execute("""
                INSERT INTO NguoiDung (HoTen, GioiTinh, NgaySinh, Email, MatKhau, Role)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (ho_ten, gioi_tinh, ngay_sinh, email, mat_khau, role))
            conn.commit()
            conn.close()
            return render_template('register.html', success=True, today=today)
        except Exception as e:
            conn.rollback()
            conn.close()
            return render_template('register.html', error=f"L·ªói: {e}", today=today)

    return render_template('register.html', today=today)

# ==========================================
# üîê ƒêƒÉng nh·∫≠p h·ªá th·ªëng
# ==========================================
@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('username', '').strip().lower()
        pw = request.form.get('password', '').strip()

        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT ID, HoTen, Role
            FROM NguoiDung
            WHERE Email = ? AND MatKhau = ?
        """, (email, pw))
        user = cur.fetchone()
        conn.close()

        if user:
            session['user_id'] = user[0]
            session['user'] = user[1]
            session['role'] = user[2]

            # ‚úÖ ƒêi·ªÅu h∆∞·ªõng theo vai tr√≤
            if user[2] == 'admin':
                return redirect(url_for('admin_manage_doctors'))
            else:
                return redirect(url_for('home'))
        else:
            flash("‚ùå Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!", "danger")
            return render_template('login.html')

    return render_template('login.html')

# ==========================================
# Trang ch·ªß
# ==========================================
@app.route('/home')
def home():
    if 'user' not in session:
        return redirect(url_for('login'))
    return render_template('home.html')

# ==========================================
# Ch·∫©n ƒëo√°n b·ªánh tim m·∫°ch + Gi·∫£i th√≠ch SHAP
# ==========================================
@app.route('/diagnose', methods=['GET', 'POST'])
def diagnose():
    if 'user' not in session:
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()

    # Danh s√°ch b·ªánh nh√¢n (ch·ªâ d√†nh cho b√°c sƒ©)
    benhnhans = []
    if session.get('role') == 'doctor':
        cur.execute("SELECT ID, HoTen, GioiTinh, NgaySinh FROM NguoiDung WHERE Role='patient'")
        for r in cur.fetchall():
            ns_fmt = r.NgaySinh.strftime("%d/%m/%Y") if hasattr(r.NgaySinh, 'strftime') else str(r.NgaySinh)
            benhnhans.append({
                "ID": r.ID,
                "HoTen": r.HoTen,
                "GioiTinh": r.GioiTinh,
                "NgaySinh": ns_fmt
            })

    # Bi·∫øn kh·ªüi t·∫°o
    result = None
    ai_advice = None
    file_result = None
    risk_percent = None
    risk_level = None
    shap_file = None
    threshold = float(request.form.get('threshold', 0.5))  # M·∫∑c ƒë·ªãnh 0.5

    chol_map = {'normal': 1, 'above_normal': 2, 'high': 3}
    gluc_map = {'normal': 1, 'above_normal': 2, 'high': 3}

    # ======== X·ª¨ L√ù NH·∫¨P LI·ªÜU TH·ª¶ C√îNG ========
    if request.method == 'POST' and 'predict_form' in request.form:
        try:
            benhnhan_id = int(request.form.get('benhnhan_id')) if session.get('role') == 'doctor' else session['user_id']

            # L·∫•y d·ªØ li·ªáu nh·∫≠p tay
            age = int(request.form.get('age'))
            gender_raw = request.form.get('gender')
            gender = 1 if gender_raw == 'Nam' else 0
            weight = float(request.form.get('weight'))
            height = float(request.form.get('height'))
            bmi = round(weight / ((height / 100) ** 2), 2)
            systolic = float(request.form.get('systolic'))
            diastolic = float(request.form.get('diastolic'))
            chol = request.form.get('cholesterol')
            glucose = request.form.get('glucose')
            smoking = 1 if request.form.get('smoking') == 'yes' else 0
            alcohol = 1 if request.form.get('alcohol') == 'yes' else 0
            exercise = 1 if request.form.get('exercise') == 'yes' else 0

            # ===== D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh =====
            if xgb_model:
                X = np.array([[age, gender, systolic, diastolic,
                               chol_map.get(chol, 1), gluc_map.get(glucose, 1),
                               smoking, alcohol, exercise, bmi]])
                prob = float(xgb_model.predict_proba(X)[0, 1])
                risk_percent = round(prob * 100, 1)
                risk_level = 'high' if prob >= threshold else 'low'
            else:
                # Fallback khi kh√¥ng c√≥ m√¥ h√¨nh
                score = 0
                if systolic > 140 or diastolic > 90: score += 1
                if chol == 'above_normal': score += 1
                elif chol == 'high': score += 2
                if glucose == 'above_normal': score += 1
                elif glucose == 'high': score += 2
                if bmi > 30: score += 1
                if smoking: score += 1
                if alcohol: score += 1
                prob = score / 8
                risk_percent = round(prob * 100, 1)
                risk_level = 'high' if prob >= threshold else 'low'

            nguy_co_text = "Nguy c∆° cao" if risk_level == 'high' else "Nguy c∆° th·∫•p"
            result = f"{nguy_co_text} - {risk_percent}%"

            # ===== Sinh l·ªùi khuy√™n AI =====
            prompt = f"""
            B·∫°n l√† b√°c sƒ© tim m·∫°ch.
            D·ªØ li·ªáu: Tu·ªïi {age}, Gi·ªõi t√≠nh {gender_raw}, BMI {bmi},
            Huy·∫øt √°p {systolic}/{diastolic}, Cholesterol {chol}, ƒê∆∞·ªùng huy·∫øt {glucose},
            H√∫t thu·ªëc {'C√≥' if smoking else 'Kh√¥ng'}, R∆∞·ª£u {'C√≥' if alcohol else 'Kh√¥ng'},
            T·∫≠p th·ªÉ d·ª•c {'C√≥' if exercise else 'Kh√¥ng'}.
            Ng∆∞·ª°ng d·ª± ƒëo√°n: {threshold}.
            H√£y ƒë∆∞a ra l·ªùi khuy√™n ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu cho b·ªánh nh√¢n.
            """
            ai_advice = get_ai_advice_cached(prompt)

            # ===== T·∫°o bi·ªÉu ƒë·ªì SHAP =====
            if xgb_model:
                try:
                    explainer = shap.TreeExplainer(xgb_model)
                    shap_values = explainer.shap_values(X)
                    shap.summary_plot(
                        shap_values, X,
                        feature_names=['Tu·ªïi', 'Gi·ªõi t√≠nh', 'HATT', 'HATTr',
                                       'Cholesterol', 'ƒê∆∞·ªùng huy·∫øt', 'H√∫t thu·ªëc',
                                       'R∆∞·ª£u bia', 'T·∫≠p th·ªÉ d·ª•c', 'BMI'],
                        show=False
                    )

                    shap_dir = os.path.join(app.root_path, 'static', 'images')
                    os.makedirs(shap_dir, exist_ok=True)
                    shap_file = f"shap_{benhnhan_id}.png"
                    shap_path = os.path.join(shap_dir, shap_file)

                    plt.tight_layout()
                    plt.savefig(shap_path, bbox_inches='tight')
                    plt.close()
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi t·∫°o bi·ªÉu ƒë·ªì SHAP: {e}")

            # ===== L∆∞u k·∫øt qu·∫£ v√†o CSDL =====
            bacsi_id = session['user_id'] if session.get('role') == 'doctor' else None
            cur.execute("""
                INSERT INTO ChanDoan
                (BenhNhanID, BacSiID, BMI, HuyetApTamThu, HuyetApTamTruong,
                 Cholesterol, DuongHuyet, HutThuoc, UongCon, TapTheDuc,
                 NguyCo, LoiKhuyen, NgayChanDoan)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, GETDATE())
            """, (benhnhan_id, bacsi_id, bmi, systolic, diastolic,
                  chol, glucose, smoking, alcohol, exercise,
                  nguy_co_text, ai_advice))
            conn.commit()

        except Exception as e:
            flash(f"L·ªói nh·∫≠p li·ªáu: {e}", "danger")

    # ======== UPLOAD FILE (CH·ªà CHO B√ÅC Sƒ®) ========
    if session.get('role') == 'doctor' and request.method == 'POST' and 'data_file' in request.files:
        f = request.files['data_file']
        if f.filename != '':
            path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(f.filename))
            f.save(path)

            # ƒê·ªçc file
            df = pd.read_csv(path) if f.filename.endswith('.csv') else pd.read_excel(path)
            df.columns = [c.strip().lower() for c in df.columns]

            required = ['age', 'gender', 'ap_hi', 'ap_lo', 'cholesterol', 'gluc',
                        'smoke', 'alco', 'active', 'weight', 'height']
            missing = [c for c in required if c not in df.columns]

            if missing:
                file_result = f"<p class='text-danger'>Thi·∫øu c√°c c·ªôt: {', '.join(missing)}</p>"
            else:
                # Ti·ªÅn x·ª≠ l√Ω
                df['bmi'] = df['weight'] / ((df['height'] / 100) ** 2)
                df['gender'] = df['gender'].map({'Nam': 1, 'N·ªØ': 0}).fillna(df['gender'])
                df['smoke'] = df['smoke'].map({'yes': 1, 'no': 0}).fillna(df['smoke'])
                df['alco'] = df['alco'].map({'yes': 1, 'no': 0}).fillna(df['alco'])
                df['active'] = df['active'].map({'yes': 1, 'no': 0}).fillna(df['active'])
                df['cholesterol'] = df['cholesterol'].map(chol_map).fillna(df['cholesterol'])
                df['gluc'] = df['gluc'].map(gluc_map).fillna(df['gluc'])

                # D·ª± ƒëo√°n h√†ng lo·∫°t
                if xgb_model:
                    X = df[['age', 'gender', 'ap_hi', 'ap_lo', 'cholesterol',
                            'gluc', 'smoke', 'alco', 'active', 'bmi']]
                    proba = xgb_model.predict_proba(X)[:, 1]
                    df['Nguy_c∆°_%'] = (proba * 100).round(1)
                    df['K·∫øt_qu·∫£'] = ['Nguy c∆° cao' if p >= threshold else 'Nguy c∆° th·∫•p' for p in proba]
                else:
                    df['Nguy_c∆°_%'] = 0
                    df['K·∫øt_qu·∫£'] = 'Ch∆∞a c√≥ m√¥ h√¨nh'

                file_result = df[['age', 'gender', 'ap_hi', 'ap_lo', 'cholesterol',
                                  'gluc', 'smoke', 'alco', 'active', 'bmi',
                                  'Nguy_c∆°_%', 'K·∫øt_qu·∫£']].to_html(
                                      classes='table table-bordered table-striped', index=False)

    conn.close()
    return render_template(
        'diagnose.html',
        benhnhans=benhnhans,
        result=result,
        risk_percent=risk_percent,
        risk_level=risk_level,
        threshold=threshold,
        ai_advice=ai_advice,
        file_result=file_result,
        shap_file=shap_file
    )


# ==========================================
# üìú L·ªãch s·ª≠ ch·∫©n ƒëo√°n (c√≥ l·ªçc & s·∫Øp x·∫øp + ƒë·∫øm t·ªïng s·ªë)
# ==========================================
@app.route('/history')
def history():
    if 'user' not in session:
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()

    # ===== L·∫•y c√°c tham s·ªë l·ªçc t·ª´ URL =====
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    doctor_id = request.args.get('doctor_id')
    risk_filter = request.args.get('risk_filter')
    sort_order = request.args.get('sort', 'desc')

    # ===== ƒêi·ªÅu ki·ªán m·∫∑c ƒë·ªãnh =====
    where_clause = "WHERE 1=1"
    params = []

    # N·∫øu l√† b·ªánh nh√¢n ‚Üí ch·ªâ xem c·ªßa h·ªç
    if session.get('role') != 'doctor':
        where_clause += " AND BenhNhanID = ?"
        params.append(session['user_id'])

    # ===== L·ªçc theo ng√†y =====
    if start_date:
        where_clause += " AND NgayChanDoan >= CONVERT(DATE, ?)"
        params.append(start_date)
    if end_date:
        where_clause += " AND NgayChanDoan <= CONVERT(DATE, ?)"
        params.append(end_date)

    # ===== L·ªçc theo b√°c sƒ© =====
    if doctor_id:
        where_clause += " AND BacSiID = ?"
        params.append(doctor_id)

    # ===== L·ªçc theo nguy c∆° =====
    if risk_filter == 'high':
        where_clause += " AND LOWER(NguyCo) LIKE '%cao%'"
    elif risk_filter == 'low':
        where_clause += " AND LOWER(NguyCo COLLATE SQL_Latin1_General_Cp1253_CI_AI) LIKE '%thap%'"

    # ===== C√¢u truy v·∫•n ch√≠nh =====
    query = f"""
        SELECT ChanDoanID, TenBenhNhan, GioiTinh, Tuoi, NgayChanDoan,
               BMI, HuyetApTamThu, HuyetApTamTruong, Cholesterol,
               DuongHuyet, HutThuoc, UongCon, TapTheDuc, NguyCo,
               LoiKhuyen, TenBacSi
        FROM V_LichSuChanDoan
        {where_clause}
        ORDER BY NgayChanDoan {'DESC' if sort_order == 'desc' else 'ASC'}
    """

    cur.execute(query, params)
    records = cur.fetchall()
    conn.close()

    # ‚úÖ ƒê·∫øm t·ªïng s·ªë b·∫£n ghi (ph·ª•c v·ª• hi·ªÉn th·ªã tr√™n giao di·ªán)
    total_records = len(records)

    # ===== L·∫•y danh s√°ch b√°c sƒ© (n·∫øu l√† b√°c sƒ© ƒëƒÉng nh·∫≠p) =====
    doctors = []
    if session.get('role') == 'doctor':
        conn2 = get_connection()
        cur2 = conn2.cursor()
        cur2.execute("SELECT ID, HoTen FROM NguoiDung WHERE Role='doctor'")
        doctors = cur2.fetchall()
        conn2.close()

    # ===== Render =====
    return render_template(
        'history.html',
        records=records,
        doctors=doctors,
        start_date=start_date,
        end_date=end_date,
        doctor_id=doctor_id,
        risk_filter=risk_filter,
        sort_order=sort_order,
        total_records=total_records   # üëà Th√™m d√≤ng n√†y
    )


# ==========================================
# X√≥a ch·∫©n ƒëo√°n
# ==========================================
@app.route('/delete_history/<int:id>', methods=['POST'])
def delete_history(id):
    if 'user' not in session:
        return redirect(url_for('login'))

    if session.get('role') != 'doctor':
        flash("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a.", "danger")
        return redirect(url_for('history'))

    conn = get_connection()
    cur = conn.cursor()

    try:
        cur.execute("DELETE FROM ChanDoan WHERE ID = ?", (id,))
        conn.commit()
        flash("‚úÖ ƒê√£ x√≥a b·∫£n ghi ch·∫©n ƒëo√°n.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for('history'))


# ==========================================
# Ch·ªânh s·ª≠a l·ªùi khuy√™n (ch·ªâ d√†nh cho b√°c sƒ©)
# ==========================================
@app.route('/edit_advice/<int:id>', methods=['POST'])
def edit_advice(id):
    if 'user' not in session or session.get('role') != 'doctor':
        flash("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a l·ªùi khuy√™n.", "danger")
        return redirect(url_for('login'))

    new_advice = request.form.get('loi_khuyen')

    conn = get_connection()
    cur = conn.cursor()

    try:
        cur.execute("""
            UPDATE ChanDoan
            SET LoiKhuyen = ?
            WHERE ID = ?
        """, (new_advice, id))
        conn.commit()
        

    except Exception as e:
        conn.rollback()
        

    finally:
        conn.close()

    return redirect(url_for('history'))

# ==========================================
# Qu·∫£n l√Ω t√†i kho·∫£n & h·ªì s∆° b·ªánh nh√¢n
# ==========================================
@app.route('/manage_accounts', methods=['GET', 'POST'])
def manage_accounts():
    # ‚úÖ Ch·ªâ cho ph√©p b√°c sƒ© truy c·∫≠p
    if 'user' not in session or session.get('role') != 'doctor':
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()
    # ================================
    # ‚ûï TH√äM b·ªánh nh√¢n m·ªõi
    # ================================
    if request.method == 'POST' and 'add_patient' in request.form:
        ho_ten = request.form.get('ho_ten')
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh')
        email = request.form.get('email')
        mat_khau = request.form.get('mat_khau')
        dien_thoai = request.form.get('dien_thoai')
        dia_chi = request.form.get('dia_chi')

        try:
            cur.execute("""
                INSERT INTO NguoiDung (HoTen, GioiTinh, NgaySinh, Email, MatKhau, DienThoai, DiaChi, Role)
                VALUES (?, ?, ?, ?, ?, ?, ?, 'patient')
            """, (ho_ten, gioi_tinh, ngay_sinh, email, mat_khau, dien_thoai, dia_chi))
            conn.commit()
            flash("‚úÖ ƒê√£ th√™m b·ªánh nh√¢n m·ªõi th√†nh c√¥ng!", "success")
        except Exception as e:
            conn.rollback()
            flash(f"‚ùå L·ªói khi th√™m b·ªánh nh√¢n: {e}", "danger")

    # ================================
    # üóë X√ìA t√†i kho·∫£n b·ªánh nh√¢n
    # ================================
    if request.method == 'POST' and 'delete_patient' in request.form:
        patient_id = request.form.get('id')

        try:
            # X√≥a to√†n b·ªô l·ªãch s·ª≠ ch·∫©n ƒëo√°n tr∆∞·ªõc
            cur.execute("DELETE FROM ChanDoan WHERE BenhNhanID=?", (patient_id,))
            # X√≥a t√†i kho·∫£n b·ªánh nh√¢n
            cur.execute("DELETE FROM NguoiDung WHERE ID=?", (patient_id,))
            conn.commit()
            flash("‚úÖ ƒê√£ x√≥a t√†i kho·∫£n v√† to√†n b·ªô l·ªãch s·ª≠ ch·∫©n ƒëo√°n c·ªßa b·ªánh nh√¢n.", "success")
        except Exception as e:
            conn.rollback()
            flash(f"‚ùå L·ªói khi x√≥a: {e}", "danger")

    # ================================
    # ‚úèÔ∏è C·∫¨P NH·∫¨T th√¥ng tin b·ªánh nh√¢n
    # ================================
    if request.method == 'POST' and 'update_patient' in request.form:
        patient_id = request.form.get('id')

        try:
            cur.execute("""
                UPDATE NguoiDung
                SET HoTen = ?, GioiTinh = ?, NgaySinh = ?, DienThoai = ?, DiaChi = ?
                WHERE ID = ?
            """, (
                request.form.get('ho_ten'),
                request.form.get('gioi_tinh'),
                request.form.get('ngay_sinh'),
                request.form.get('dien_thoai'),
                request.form.get('dia_chi'),
                patient_id
            ))
            conn.commit()
            flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n.", "success")
        except Exception as e:
            conn.rollback()
            flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}", "danger")

    # ================================
    # üîé T√åM KI·∫æM b·ªánh nh√¢n
    # ================================
    search = request.args.get('search', '').strip()  # L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ URL (?search=...)

    if search:
        cur.execute("""
            SELECT ID, HoTen, Email, GioiTinh, NgaySinh, DienThoai, DiaChi
            FROM NguoiDung
            WHERE Role = 'patient' AND (HoTen LIKE ? OR Email LIKE ?)
            ORDER BY HoTen
        """, (f"%{search}%", f"%{search}%"))
    else:
        cur.execute("""
            SELECT ID, HoTen, Email, GioiTinh, NgaySinh, DienThoai, DiaChi
            FROM NguoiDung
            WHERE Role = 'patient'
            ORDER BY HoTen
        """)

    raw_patients = cur.fetchall()

    # ================================
    # X·ª¨ L√ù d·ªØ li·ªáu tr·∫£ v·ªÅ
    # ================================
    patients = []
    for p in raw_patients:
        if p.NgaySinh and hasattr(p.NgaySinh, "strftime"):
            ngay_sinh_str = p.NgaySinh.strftime("%d/%m/%Y")
            ngay_sinh_val = p.NgaySinh.strftime("%Y-%m-%d")
        else:
            ngay_sinh_str = p.NgaySinh if p.NgaySinh else "‚Äî"
            ngay_sinh_val = p.NgaySinh if p.NgaySinh else ""

        patients.append({
            "ID": p.ID,
            "HoTen": p.HoTen,
            "Email": p.Email,
            "GioiTinh": p.GioiTinh,
            "NgaySinh_str": ngay_sinh_str,
            "NgaySinh_val": ngay_sinh_val,
            "DienThoai": p.DienThoai,
            "DiaChi": p.DiaChi
        })

    conn.close()

    # ‚úÖ Truy·ªÅn c·∫£ patients v√† t·ª´ kh√≥a t√¨m ki·∫øm v√†o template
    return render_template('manage_accounts.html', patients=patients, search=search)

# ==========================================
# H·ªì s∆° c√° nh√¢n
# ==========================================
@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user' not in session:
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()
    if request.method == 'POST':
        cur.execute("""
            UPDATE NguoiDung
            SET HoTen=?, DienThoai=?, NgaySinh=?, GioiTinh=?, DiaChi=?
            WHERE ID=?
        """, (request.form.get('ho_ten'),
              request.form.get('dien_thoai'),
              request.form.get('ngay_sinh'),
              request.form.get('gioi_tinh'),
              request.form.get('dia_chi'),
              session['user_id']))
        conn.commit()

    cur.execute("""
        SELECT HoTen, Email, Role, DienThoai, NgaySinh, GioiTinh, DiaChi
        FROM NguoiDung WHERE ID=?
    """, (session['user_id'],))
    user_info = cur.fetchone()
    conn.close()
    return render_template('profile.html', user_info=user_info)
# ==========================================
# üì§ Xu·∫•t b√°o c√°o k·∫øt qu·∫£ ch·∫©n ƒëo√°n ra Excel 
# ==========================================
@app.route('/export_diagnosis', methods=['POST'])
def export_diagnosis():
    from openpyxl import Workbook
    from openpyxl.drawing.image import Image as ExcelImage
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from io import BytesIO
    from flask import send_file
    from datetime import datetime
    import os

    # ===== D·ªØ li·ªáu t·ª´ form =====
    data = {key: request.form.get(key, '') for key in [
        'age', 'gender', 'bmi', 'systolic', 'diastolic', 'cholesterol',
        'glucose', 'smoking', 'alcohol', 'exercise',
        'risk_percent', 'risk_level', 'ai_advice', 'shap_file', 'benhnhan_id'
    ]}

    # ===== L·∫•y t√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p & vai tr√≤ =====
    user_name = session.get('user', 'Ng∆∞·ªùi d√πng')
    user_role = session.get('role', 'patient')

    # ===== X√°c ƒë·ªãnh t√™n b·ªánh nh√¢n v√† b√°c sƒ© =====
    patient_name = None
    doctor_name = None

    if user_role == 'doctor':
        # B√°c sƒ© ch·ªçn b·ªánh nh√¢n trong danh s√°ch => l·∫•y t√™n b·ªánh nh√¢n t·ª´ DB
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT HoTen FROM NguoiDung WHERE ID = ?", data.get('benhnhan_id'))
        row = cur.fetchone()
        conn.close()
        patient_name = row[0] if row else "Kh√¥ng x√°c ƒë·ªãnh"
        doctor_name = user_name
    else:
        # B·ªánh nh√¢n t·ª± ch·∫©n ƒëo√°n
        patient_name = user_name
        doctor_name = "‚Äî"

    # ===== T·∫°o workbook =====
    wb = Workbook()
    ws = wb.active
    ws.title = "B√°o c√°o ch·∫©n ƒëo√°n"

    # ===== Style =====
    title_font = Font(size=18, bold=True, color="1F4E78")
    header_font = Font(size=13, bold=True, color="FFFFFF")
    section_font = Font(size=12, bold=True, color="1F4E78")
    normal_font = Font(size=11)
    advice_font = Font(size=12, color="000000")
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    left = Alignment(horizontal="left", vertical="center", wrap_text=True)
    wrap = Alignment(wrap_text=True, vertical="top")
    border = Border(
        left=Side(style="thin", color="000000"),
        right=Side(style="thin", color="000000"),
        top=Side(style="thin", color="000000"),
        bottom=Side(style="thin", color="000000")
    )
    fill_header = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    fill_sub = PatternFill(start_color="E9F3FF", end_color="E9F3FF", fill_type="solid")
    fill_high = PatternFill(start_color="F8D7DA", end_color="F8D7DA", fill_type="solid")
    fill_low = PatternFill(start_color="D1E7DD", end_color="D1E7DD", fill_type="solid")

    # ===== Ti√™u ƒë·ªÅ =====
    ws.merge_cells("A1:E1")
    ws["A1"] = "B√ÅO C√ÅO K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN TIM M·∫†CH"
    ws["A1"].font = title_font
    ws["A1"].alignment = center
    ws.append([])

    # ===== I. Th√¥ng tin chung =====
    ws.merge_cells("A3:E3")
    ws["A3"] = "I. TH√îNG TIN CHUNG"
    ws["A3"].font = section_font
    ws["A3"].alignment = left

    ws.append(["T√™n b·ªánh nh√¢n", patient_name])
    ws.append(["B√°c sƒ© ch·∫©n ƒëo√°n", doctor_name])
    ws.append(["Ng√†y t·∫°o b√°o c√°o", datetime.now().strftime("%d/%m/%Y %H:%M")])
    ws.append([])

    # ===== II. D·ªØ li·ªáu ƒë·∫ßu v√†o =====
    ws.merge_cells("A7:E7")
    ws["A7"] = "II. D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO"
    ws["A7"].font = section_font
    ws["A7"].alignment = left

    ws.append(["Thu·ªôc t√≠nh", "Gi√° tr·ªã", "Thu·ªôc t√≠nh", "Gi√° tr·ªã"])
    for cell in ws[8]:
        cell.font = header_font
        cell.fill = fill_header
        cell.border = border
        cell.alignment = center

    input_data = [
        ["Tu·ªïi", data['age'], "Gi·ªõi t√≠nh", data['gender']],
        ["BMI", data['bmi'], "Huy·∫øt √°p (HATT/HATTr)", f"{data['systolic']}/{data['diastolic']}"],
        ["Cholesterol", data['cholesterol'], "ƒê∆∞·ªùng huy·∫øt", data['glucose']],
        ["H√∫t thu·ªëc", "C√≥" if data['smoking']=="yes" else "Kh√¥ng", "R∆∞·ª£u/Bia", "C√≥" if data['alcohol']=="yes" else "Kh√¥ng"],
        ["T·∫≠p th·ªÉ d·ª•c", "C√≥" if data['exercise']=="yes" else "Kh√¥ng", "", ""]
    ]
    for row in input_data:
        ws.append(row)
        for cell in ws[ws.max_row]:
            cell.font = normal_font
            cell.border = border
            cell.alignment = left

    ws.append([])

    # ===== III. K·∫øt qu·∫£ ch·∫©n ƒëo√°n =====
    ws.merge_cells(f"A{ws.max_row+1}:E{ws.max_row+1}")
    ws[f"A{ws.max_row}"] = "III. K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN"
    ws[f"A{ws.max_row}"].font = section_font
    ws[f"A{ws.max_row}"].alignment = left

    ws.append(["Nguy c∆°", "T·ªâ l·ªá (%)", "ƒê√°nh gi√°", ""])
    for cell in ws[ws.max_row]:
        cell.font = header_font
        cell.fill = fill_header
        cell.border = border
        cell.alignment = center

    ws.append([
        "Cao" if data['risk_level'] == 'high' else "Th·∫•p",
        data['risk_percent'] + "%",
        "‚ö†Ô∏è C·∫ßn theo d√µi" if data['risk_level'] == 'high' else "‚úÖ ·ªîn ƒë·ªãnh",
        ""
    ])
    for cell in ws[ws.max_row]:
        cell.font = normal_font
        cell.border = border
        cell.alignment = center
        cell.fill = fill_high if data['risk_level'] == 'high' else fill_low

    ws.append([])

    # ===== IV. L·ªùi khuy√™n t·ª´ AI =====
    ws.merge_cells(f"A{ws.max_row+1}:E{ws.max_row+1}")
    ws[f"A{ws.max_row}"] = "IV. L·ªúI KHUY√äN T·ª™ AI"
    ws[f"A{ws.max_row}"].font = section_font
    ws[f"A{ws.max_row}"].alignment = left

    # ‚úÖ Fix l·ªói merged cell + format ƒë·∫πp
    start_row = ws.max_row + 1
    end_row = start_row + 5
    ws.merge_cells(f"A{start_row}:E{end_row}")
    cell = ws[f"A{start_row}"]
    cell.value = data['ai_advice'] or "Ch∆∞a c√≥ l·ªùi khuy√™n t·ª´ AI."
    cell.alignment = wrap
    cell.font = advice_font
    cell.border = border
    cell.fill = fill_sub

    ws.append([])
    ws.append([])

    # ===== V. Bi·ªÉu ƒë·ªì SHAP =====
    shap_path = os.path.join(app.root_path, 'static', 'images', data['shap_file']) if data['shap_file'] else None
    if shap_path and os.path.exists(shap_path):
        ws.merge_cells(f"A{ws.max_row+1}:E{ws.max_row+1}")
        ws[f"A{ws.max_row}"] = "V. GI·∫¢I TH√çCH K·∫æT QU·∫¢ B·∫∞NG BI·ªÇU ƒê·ªí SHAP"
        ws[f"A{ws.max_row}"].font = section_font
        ws[f"A{ws.max_row}"].alignment = left
        try:
            img = ExcelImage(shap_path)
            img.width = 520
            img.height = 320
            ws.add_image(img, f"A{ws.max_row+1}")
        except Exception as e:
            ws.append([f"L·ªói khi ch√®n h√¨nh: {e}"])

    # ===== Footer =====
    ws.append([])
    ws.merge_cells(f"A{ws.max_row}:E{ws.max_row}")
    ws[f"A{ws.max_row}"] = f"üìÖ B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi: {doctor_name or user_name} ‚Äî {datetime.now().strftime('%H:%M, %d/%m/%Y')}"
    ws[f"A{ws.max_row}"].alignment = center
    ws[f"A{ws.max_row}"].font = Font(size=10, italic=True, color="777777")

    # ===== CƒÉn ch·ªânh ƒë·ªô r·ªông =====
    ws.column_dimensions["A"].width = 22
    ws.column_dimensions["B"].width = 20
    ws.column_dimensions["C"].width = 25
    ws.column_dimensions["D"].width = 25
    ws.column_dimensions["E"].width = 10

    # ===== Xu·∫•t file =====
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    filename = f"BaoCao_ChanDoan_{patient_name.replace(' ', '_')}.xlsx"

    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )


# ==========================================
# ƒêƒÉng xu·∫•t
# ==========================================
@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))
# =========================================================
# üìä DASHBOARD TH·ªêNG K√ä (Admin)
# =========================================================
@app.route('/admin/dashboard')
def admin_dashboard():
    # --- Ki·ªÉm tra quy·ªÅn truy c·∫≠p ---
    if 'user' not in session or session.get('role') != 'admin':
        flash("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!", "danger")
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()

    # ==========================
    # 1Ô∏è‚É£ T·ªïng s·ªë b√°c sƒ©, b·ªánh nh√¢n, l∆∞·ª£t ch·∫©n ƒëo√°n
    # ==========================
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='doctor'")
    total_doctors = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='patient'")
    total_patients = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM ChanDoan")
    total_diagnoses = cur.fetchone()[0]

    # ==========================
    # 2Ô∏è‚É£ L∆∞·ª£t ch·∫©n ƒëo√°n theo th√°ng
    # ==========================
    cur.execute("""
        SELECT FORMAT(NgayChanDoan, 'MM-yyyy') AS Thang, COUNT(*) AS SoLuong
        FROM ChanDoan
        GROUP BY FORMAT(NgayChanDoan, 'MM-yyyy')
        ORDER BY MIN(NgayChanDoan)
    """)
    monthly = cur.fetchall()
    months = [row.Thang for row in monthly]
    counts = [row.SoLuong for row in monthly]

    # ==========================
    # 3Ô∏è‚É£ T·ª∑ l·ªá nguy c∆° Cao / Th·∫•p
    # ==========================
    cur.execute("""
        SELECT NguyCo, COUNT(*) AS SoLuong
        FROM ChanDoan
        GROUP BY NguyCo
    """)
    risk_data = cur.fetchall()
    risk_labels = [row.NguyCo for row in risk_data]
    risk_values = [row.SoLuong for row in risk_data]

    # ==========================
    # 4Ô∏è‚É£ Top 5 b√°c sƒ© c√≥ nhi·ªÅu ca nh·∫•t
    # ==========================
    cur.execute("""
        SELECT TOP 5 bs.HoTen, COUNT(cd.ID) AS SoCa
        FROM ChanDoan cd
        JOIN NguoiDung bs ON cd.BacSiID = bs.ID
        GROUP BY bs.HoTen
        ORDER BY SoCa DESC
    """)
    top_doctors = cur.fetchall()
    top_names = [row.HoTen for row in top_doctors]
    top_counts = [row.SoCa for row in top_doctors]

    # ==========================
    # 5Ô∏è‚É£ Trung b√¨nh ch·ªâ s·ªë y khoa (BMI, Huy·∫øt √°p, h√†nh vi)
    # ==========================
    cur.execute("""
        SELECT 
            AVG(BMI) AS AvgBMI,
            AVG(HuyetApTamThu) AS AvgHATT,
            AVG(HuyetApTamTruong) AS AvgHATTr,
            SUM(CASE WHEN HutThuoc = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS SmokePercent,
            SUM(CASE WHEN UongCon = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS AlcoPercent,
            SUM(CASE WHEN TapTheDuc = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS ActivePercent
        FROM ChanDoan
    """)
    row = cur.fetchone()
    avg_bmi = round(row.AvgBMI, 1) if row.AvgBMI else 0
    avg_systolic = int(row.AvgHATT) if row.AvgHATT else 0
    avg_diastolic = int(row.AvgHATTr) if row.AvgHATTr else 0
    smoke_percent = round(row.SmokePercent, 1) if row.SmokePercent else 0
    alco_percent = round(row.AlcoPercent, 1) if row.AlcoPercent else 0
    active_percent = round(row.ActivePercent, 1) if row.ActivePercent else 0

    # ==========================
    # 6Ô∏è‚É£ Hi·ªáu su·∫•t ch·∫©n ƒëo√°n c·ªßa b√°c sƒ©
    # ==========================
    cur.execute("""
        SELECT 
            ND.HoTen AS BacSi,
            COUNT(CD.ID) AS SoCa,
            AVG(CD.BMI) AS TB_BMI,
            SUM(CASE WHEN CD.NguyCo LIKE '%cao%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS TyLeCao
        FROM ChanDoan CD
        JOIN NguoiDung ND ON CD.BacSiID = ND.ID
        GROUP BY ND.HoTen
        ORDER BY SoCa DESC
    """)
    perf_rows = cur.fetchall()
    perf_names = [row.BacSi for row in perf_rows]
    perf_cases = [row.SoCa for row in perf_rows]
    perf_rate = [round(row.TyLeCao, 1) if row.TyLeCao else 0 for row in perf_rows]

    conn.close()

    # ==========================
    # Tr·∫£ d·ªØ li·ªáu cho template
    # ==========================
    return render_template(
        'admin_dashboard.html',
        total_doctors=total_doctors,
        total_patients=total_patients,
        total_diagnoses=total_diagnoses,
        months=months,
        counts=counts,
        risk_labels=risk_labels,
        risk_values=risk_values,
        top_names=top_names,
        top_counts=top_counts,
        avg_bmi=avg_bmi,
        avg_systolic=avg_systolic,
        avg_diastolic=avg_diastolic,
        smoke_percent=smoke_percent,
        alco_percent=alco_percent,
        active_percent=active_percent,
        perf_names=perf_names,
        perf_cases=perf_cases,
        perf_rate=perf_rate
    )


# =========================================================
# üë©‚Äç‚öïÔ∏è Qu·∫£n l√Ω B√°c sƒ© (Admin)
# =========================================================
@app.route('/admin/manage_doctors', methods=['GET', 'POST'])
def admin_manage_doctors():
    # -------------------- Ki·ªÉm tra quy·ªÅn truy c·∫≠p --------------------
    if 'user' not in session or session.get('role') != 'admin':
        flash("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!", "danger")
        return redirect(url_for('login'))

    import datetime
    conn = get_connection()
    cur = conn.cursor()

    # ======================== üü¢ TH√äM B√ÅC Sƒ® ========================
    if request.method == 'POST' and 'add_doctor' in request.form:
        ho_ten = request.form.get('ho_ten', '').strip()
        email = request.form.get('email', '').strip().lower()
        mat_khau = request.form.get('mat_khau', '').strip()
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh') or None
        dien_thoai = request.form.get('dien_thoai')
        dia_chi = request.form.get('dia_chi')

        # Ki·ªÉm tra tr√πng email
        cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Email = ?", (email,))
        if cur.fetchone()[0] > 0:
            flash("‚ùå Email n√†y ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!", "danger")
        else:
            cur.execute("""
                INSERT INTO NguoiDung (HoTen, Email, MatKhau, Role, NgaySinh, GioiTinh, DienThoai, DiaChi)
                VALUES (?, ?, ?, 'doctor', ?, ?, ?, ?)
            """, (ho_ten, email, mat_khau, ngay_sinh, gioi_tinh, dien_thoai, dia_chi))
            conn.commit()
            flash("‚úÖ Th√™m b√°c sƒ© m·ªõi th√†nh c√¥ng!", "success")

    # ======================== üü° S·ª¨A B√ÅC Sƒ® ========================
    elif request.method == 'POST' and 'edit_doctor' in request.form:
        id = request.form.get('id')
        ho_ten = request.form.get('ho_ten', '').strip()
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh') or None
        email = request.form.get('email', '').strip().lower()
        mat_khau = request.form.get('mat_khau', '').strip()
        dien_thoai = request.form.get('dien_thoai')
        dia_chi = request.form.get('dia_chi')

        # N·∫øu kh√¥ng nh·∫≠p m·∫≠t kh·∫©u ‚Üí gi·ªØ nguy√™n m·∫≠t kh·∫©u c≈©
        if not mat_khau:
            cur.execute("""
                UPDATE NguoiDung
                SET HoTen = ?, GioiTinh = ?, NgaySinh = ?, Email = ?, DienThoai = ?, DiaChi = ?
                WHERE ID = ? AND Role = 'doctor'
            """, (ho_ten, gioi_tinh, ngay_sinh, email, dien_thoai, dia_chi, id))
        else:
            cur.execute("""
                UPDATE NguoiDung
                SET HoTen = ?, GioiTinh = ?, NgaySinh = ?, Email = ?, MatKhau = ?, DienThoai = ?, DiaChi = ?
                WHERE ID = ? AND Role = 'doctor'
            """, (ho_ten, gioi_tinh, ngay_sinh, email, mat_khau, dien_thoai, dia_chi, id))

        conn.commit()
        flash("‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin b√°c sƒ© th√†nh c√¥ng!", "success")

    # ======================== üî¥ X√ìA B√ÅC Sƒ® ========================
    elif request.method == 'POST' and 'delete_doctor' in request.form:
        id = request.form.get('id')
        cur.execute("DELETE FROM NguoiDung WHERE ID = ? AND Role = 'doctor'", (id,))
        conn.commit()
        flash("üóë ƒê√£ x√≥a b√°c sƒ© kh·ªèi h·ªá th·ªëng!", "success")

    # ======================== üìã HI·ªÇN TH·ªä DANH S√ÅCH ========================
    cur.execute("""
        SELECT ID, HoTen, Email, GioiTinh, NgaySinh, DienThoai, DiaChi, NgayTao
        FROM NguoiDung
        WHERE Role = 'doctor'
        ORDER BY NgayTao DESC
    """)
    doctors = cur.fetchall()

    # ‚úÖ Chuy·ªÉn chu·ªói ng√†y sang datetime (n·∫øu SQL Server tr·∫£ v·ªÅ d·∫°ng text)
    for d in doctors:
        # NgaySinh
        if hasattr(d, 'NgaySinh') and isinstance(d.NgaySinh, str):
            try:
                d.NgaySinh = datetime.datetime.strptime(d.NgaySinh.split(" ")[0], "%Y-%m-%d")
            except:
                d.NgaySinh = None

        # NgayTao
        if hasattr(d, 'NgayTao') and isinstance(d.NgayTao, str):
            try:
                d.NgayTao = datetime.datetime.strptime(d.NgayTao.split(" ")[0], "%Y-%m-%d")
            except:
                d.NgayTao = None

    conn.close()

    # Tr·∫£ v·ªÅ giao di·ªán
    return render_template('admin_doctors.html', doctors=doctors)

# ==========================================
# üìä XU·∫§T FILE EXCEL TH·ªêNG K√ä H·ªÜ TH·ªêNG (N√ÇNG C·∫§P)
# ==========================================
@app.route('/export_admin_stats', methods=['POST'])
def export_admin_stats():
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from openpyxl.chart import PieChart, BarChart, LineChart, Reference
    from openpyxl.utils import get_column_letter
    from io import BytesIO
    from flask import send_file
    from datetime import datetime

    conn = get_connection()
    cur = conn.cursor()

    # ===============================
    # L·∫•y d·ªØ li·ªáu th·ªëng k√™ t·ª´ DB
    # ===============================
    # T·ªïng quan
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='doctor'")
    total_doctors = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='patient'")
    total_patients = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM ChanDoan")
    total_diagnoses = cur.fetchone()[0]

    # T·ª∑ l·ªá nguy c∆°
    cur.execute("""
        SELECT NguyCo, COUNT(*) AS SoLuong
        FROM ChanDoan
        GROUP BY NguyCo
    """)
    risk_data = cur.fetchall()

    # Top 5 b√°c sƒ©
    cur.execute("""
        SELECT TOP 5 bs.HoTen, COUNT(cd.ID) AS SoCa
        FROM ChanDoan cd
        JOIN NguoiDung bs ON cd.BacSiID = bs.ID
        GROUP BY bs.HoTen
        ORDER BY SoCa DESC
    """)
    top_doctors = cur.fetchall()

    # Hi·ªáu su·∫•t b√°c sƒ©
    cur.execute("""
        SELECT 
            ND.HoTen AS BacSi,
            COUNT(CD.ID) AS SoCa,
            SUM(CASE WHEN CD.NguyCo LIKE '%cao%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS TyLeCao
        FROM ChanDoan CD
        JOIN NguoiDung ND ON CD.BacSiID = ND.ID
        GROUP BY ND.HoTen
        ORDER BY SoCa DESC
    """)
    perf_rows = cur.fetchall()

    conn.close()

    # ===============================
    # T·∫°o workbook Excel
    # ===============================
    wb = Workbook()
    ws = wb.active
    ws.title = "T·ªïng quan"

    # --- Style c∆° b·∫£n ---
    title_font = Font(size=16, bold=True, color="1F4E78")
    header_font = Font(size=12, bold=True, color="FFFFFF")
    fill_blue = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    align_center = Alignment(horizontal="center", vertical="center")
    border = Border(
        left=Side(style="thin", color="999999"),
        right=Side(style="thin", color="999999"),
        top=Side(style="thin", color="999999"),
        bottom=Side(style="thin", color="999999")
    )

    # ===============================
    # üìÑ Sheet 1: T·ªïng quan h·ªá th·ªëng
    # ===============================
    ws.merge_cells("A1:D1")
    ws["A1"] = "B√ÅO C√ÅO TH·ªêNG K√ä H·ªÜ TH·ªêNG CH·∫®N ƒêO√ÅN TIM M·∫†CH"
    ws["A1"].font = title_font
    ws["A1"].alignment = align_center

    ws.append([])
    ws.append(["Ng√†y xu·∫•t b√°o c√°o:", datetime.now().strftime("%d/%m/%Y %H:%M")])
    ws.append([])
    ws.append(["T·ªïng s·ªë b√°c sƒ©", total_doctors])
    ws.append(["T·ªïng s·ªë b·ªánh nh√¢n", total_patients])
    ws.append(["T·ªïng s·ªë l∆∞·ª£t ch·∫©n ƒëo√°n", total_diagnoses])
    ws.append([])

    ws.append(["T√™n b√°c sƒ©", "S·ªë ca ch·∫©n ƒëo√°n"])
    for cell in ws[ws.max_row]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border
    for d in top_doctors:
        ws.append([d.HoTen, d.SoCa])
        for cell in ws[ws.max_row]:
            cell.border = border
    ws.column_dimensions["A"].width = 40
    ws.column_dimensions["B"].width = 20

    # ===============================
    # üìä Sheet 2: B√°c sƒ© / B·ªánh nh√¢n
    # ===============================
    ws2 = wb.create_sheet("B√°c sƒ©_B·ªánh nh√¢n")
    ws2.append(["Lo·∫°i t√†i kho·∫£n", "S·ªë l∆∞·ª£ng"])
    ws2.append(["B√°c sƒ©", total_doctors])
    ws2.append(["B·ªánh nh√¢n", total_patients])

    for cell in ws2[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border
    for row in ws2.iter_rows(min_row=2, max_col=2):
        for c in row:
            c.border = border
            c.alignment = align_center

    pie = PieChart()
    pie.title = "T·ª∑ l·ªá B√°c sƒ© / B·ªánh nh√¢n"
    data = Reference(ws2, min_col=2, min_row=1, max_row=3)
    labels = Reference(ws2, min_col=1, min_row=2, max_row=3)
    pie.add_data(data, titles_from_data=True)
    pie.set_categories(labels)
    ws2.add_chart(pie, "D5")

    # ===============================
    # üìä Sheet 3: T·ª∑ l·ªá nguy c∆°
    # ===============================
    ws3 = wb.create_sheet("Nguy c∆°")
    ws3.append(["M·ª©c nguy c∆°", "S·ªë l∆∞·ª£ng"])
    for r in risk_data:
        ws3.append([r.NguyCo, r.SoLuong])

    for cell in ws3[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border

    bar = BarChart()
    bar.title = "T·ª∑ l·ªá nguy c∆° cao / th·∫•p"
    data = Reference(ws3, min_col=2, min_row=1, max_row=ws3.max_row)
    cats = Reference(ws3, min_col=1, min_row=2, max_row=ws3.max_row)
    bar.add_data(data, titles_from_data=True)
    bar.set_categories(cats)
    bar.y_axis.title = "S·ªë l∆∞·ª£ng"
    ws3.add_chart(bar, "D5")

    # ===============================
    # üìä Sheet 4: Top 5 b√°c sƒ©
    # ===============================
    ws4 = wb.create_sheet("Top 5 b√°c sƒ©")
    ws4.append(["T√™n b√°c sƒ©", "S·ªë ca ch·∫©n ƒëo√°n"])
    for d in top_doctors:
        ws4.append([d.HoTen, d.SoCa])

    for cell in ws4[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border

    chart4 = BarChart()
    chart4.title = "Top 5 b√°c sƒ© ch·∫©n ƒëo√°n nhi·ªÅu ca nh·∫•t"
    data = Reference(ws4, min_col=2, min_row=1, max_row=ws4.max_row)
    cats = Reference(ws4, min_col=1, min_row=2, max_row=ws4.max_row)
    chart4.add_data(data, titles_from_data=True)
    chart4.set_categories(cats)
    chart4.y_axis.title = "S·ªë ca"
    ws4.add_chart(chart4, "D5")

    # ===============================
    # üìä Sheet 5: Hi·ªáu su·∫•t b√°c sƒ©
    # ===============================
    ws5 = wb.create_sheet("Hi·ªáu su·∫•t b√°c sƒ©")
    ws5.append(["B√°c sƒ©", "S·ªë ca", "T·ª∑ l·ªá nguy c∆° cao (%)"])
    for p in perf_rows:
        ws5.append([p.BacSi, p.SoCa, round(p.TyLeCao or 0, 1)])

    for cell in ws5[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border

    linechart = LineChart()
    linechart.title = "Hi·ªáu su·∫•t ch·∫©n ƒëo√°n v√† t·ª∑ l·ªá nguy c∆° cao"
    data_line = Reference(ws5, min_col=3, min_row=1, max_row=ws5.max_row)
    cats = Reference(ws5, min_col=1, min_row=2, max_row=ws5.max_row)
    linechart.add_data(data_line, titles_from_data=True)
    linechart.set_categories(cats)
    linechart.y_axis.title = "T·ª∑ l·ªá (%)"

    barchart = BarChart()
    data_bar = Reference(ws5, min_col=2, min_row=1, max_row=ws5.max_row)
    barchart.add_data(data_bar, titles_from_data=True)
    barchart.set_categories(cats)
    barchart.y_axis.title = "S·ªë ca"

    # G·ªôp 2 bi·ªÉu ƒë·ªì (bar + line)
    linechart.y_axis.crosses = "max"
    barchart += linechart
    ws5.add_chart(barchart, "E5")

    # ===============================
    # Xu·∫•t file
    # ===============================
    output = BytesIO()
    wb.save(output)
    output.seek(0)

    filename = f"ThongKe_HeThong_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"

    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# ==========================================
# üåø Trang Ki·∫øn th·ª©c Y h·ªçc (cho b·ªánh nh√¢n)
# ==========================================
@app.route('/tips')
def tips():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    # Ch·ªâ cho ph√©p b·ªánh nh√¢n xem
    if session.get('role') != 'patient':
        flash("Ch·ªâ b·ªánh nh√¢n m·ªõi ƒë∆∞·ª£c truy c·∫≠p trang n√†y.", "warning")
        return redirect(url_for('home'))
    
    return render_template('tips.html')

# ==========================================
# Main
# ==========================================
if __name__ == '__main__':
    app.run(debug=True)
