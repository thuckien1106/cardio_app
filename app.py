from flask import Flask, render_template, request, redirect, url_for, session, flash,jsonify
import pandas as pd
import os
from werkzeug.utils import secure_filename
import pyodbc
import datetime
from dotenv import load_dotenv
import google.generativeai as genai
from functools import lru_cache
import numpy as np
from datetime import date
import shap
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


# ==========================================
# C·∫•u h√¨nh Flask
# ==========================================
load_dotenv()
app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY", "cvdapp-secret-key")

# ==========================================
# K·∫øt n·ªëi SQL Server
# ==========================================
def get_connection():
    return pyodbc.connect(
        "DRIVER={SQL Server};"
        "SERVER=HKT;"
        "DATABASE=CVD_App;"
        "UID=sa;"
        "PWD=123"
    )

# ==========================================
# C·∫•u h√¨nh Gemini AI
# ==========================================
MODEL_NAME = "models/gemini-2.5-flash-lite"
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

@lru_cache(maxsize=128)
def get_ai_advice_cached(prompt: str) -> str:
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y l·ªùi khuy√™n AI: {e}"

# ==========================================
# Load m√¥ h√¨nh XGBoost
# ==========================================
xgb_model = None
try:
    import xgboost as xgb
    MODEL_PATH = "xgb_heart30.json"
    if os.path.exists(MODEL_PATH):
        xgb_model = xgb.XGBClassifier()
        xgb_model.load_model(MODEL_PATH)
        print("‚úÖ M√¥ h√¨nh XGBoost ƒë√£ load th√†nh c√¥ng.")
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh, s·∫Ω d√πng heuristic.")
except Exception as e:
    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load m√¥ h√¨nh XGBoost: {e}")
    xgb_model = None
# Warm up m√¥ h√¨nh ngay khi Flask kh·ªüi ƒë·ªông
@app.before_request
def warmup_model():
    """Ch·∫°y warm-up 1 l·∫ßn duy nh·∫•t khi nh·∫≠n request ƒë·∫ßu ti√™n."""
    if not getattr(app, "_model_warmed", False):
        try:
            import numpy as np, shap
            dummy = np.array([[50,1,120,80,2,1,0,0,1,25]])
            _ = xgb_model.predict_proba(dummy)
            shap.TreeExplainer(xgb_model)
            print("‚úÖ Warm-up ho√†n t·∫•t, model & SHAP ƒë√£ cache.")
            app._model_warmed = True  # ƒë√°nh d·∫•u ƒë√£ warm-up r·ªìi
        except Exception as e:
            print(f"‚ö†Ô∏è Warm-up model l·ªói: {e}")

# ==========================================
# C·∫•u h√¨nh upload
# ==========================================
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

import re

# ==========================================
# üßæ ƒêƒÉng k√Ω t√†i kho·∫£n
# ==========================================
@app.route('/register', methods=['GET', 'POST'])
def register():
    today = date.today().strftime('%Y-%m-%d')

    if request.method == 'POST':
        ho_ten = request.form.get('ho_ten')
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh')
        email = request.form.get('email').strip().lower()
        mat_khau = request.form.get('mat_khau')
        role = 'patient'  # M·∫∑c ƒë·ªãnh l√† b·ªánh nh√¢n

        # üß© Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
        if not re.match(r'^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$', mat_khau):
            flash("‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i ‚â•8 k√Ω t·ª±, ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 s·ªë v√† 1 k√Ω t·ª± ƒë·∫∑c bi·ªát.", "warning")
            return render_template('register.html', today=today)

        conn = get_connection()
        cur = conn.cursor()

        # Ki·ªÉm tra email tr√πng
        cur.execute("SELECT ID FROM NguoiDung WHERE Email = ?", (email,))
        if cur.fetchone():
            conn.close()
            flash("‚ö†Ô∏è Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng! Vui l√≤ng ch·ªçn email kh√°c.", "warning")
            return render_template('register.html', today=today)

        try:
            cur.execute("""
                INSERT INTO NguoiDung (HoTen, GioiTinh, NgaySinh, Email, MatKhau, Role)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (ho_ten, gioi_tinh, ngay_sinh, email, mat_khau, role))
            conn.commit()
            conn.close()

            flash("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.", "success")
            return redirect(url_for('login'))

        except Exception as e:
            conn.rollback()
            conn.close()
            flash(f"‚ùå L·ªói khi ƒëƒÉng k√Ω: {e}", "danger")
            return render_template('register.html', today=today)

    return render_template('register.html', today=today)

# ==========================================
# üîê ƒêƒÉng nh·∫≠p h·ªá th·ªëng
# ==========================================
@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('username', '').strip().lower()
        pw = request.form.get('password', '').strip()

        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT ID, HoTen, Role, MatKhau
            FROM NguoiDung
            WHERE Email = ?
        """, (email,))
        user = cur.fetchone()
        conn.close()

        # üîπ Ki·ªÉm tra t√†i kho·∫£n & m·∫≠t kh·∫©u
        if user and user.MatKhau == pw:
            # T·∫°o session
            session['user_id'] = user.ID
            session['user'] = user.HoTen
            session['role'] = user.Role

            # Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng
            flash(f"üéâ Ch√†o m·ª´ng {user.HoTen} ƒëƒÉng nh·∫≠p th√†nh c√¥ng!", "success")

            # ‚úÖ ƒêi·ªÅu h∆∞·ªõng theo vai tr√≤
            if user.Role == 'admin':
                return redirect(url_for('history'))
            elif user.Role == 'doctor':
                return redirect(url_for('home'))  
            else:
                return redirect(url_for('home'))

        else:
            # ‚ùå Sai m·∫≠t kh·∫©u ‚Üí hi·ªÉn th·ªã ngay
            flash("‚ùå Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!", "danger")
            return render_template('login.html')

    # GET request ‚Üí hi·ªÉn th·ªã form
    return render_template('login.html')

# ==========================================
# Trang ch·ªß
# ==========================================
@app.route('/home')
def home():
    if 'user' not in session:
        return redirect(url_for('login'))
    return render_template('home.html')
# ==========================================
# üì° API: L·∫•y th√¥ng tin b·ªánh nh√¢n t·ª´ h·ªì s∆° NguoiDung
# ==========================================
@app.route('/get_patient_info/<int:benhnhan_id>')
def get_patient_info(benhnhan_id):
    if 'user' not in session or session.get('role') != 'doctor':
        return jsonify({"error": "Unauthorized"}), 403

    conn = get_connection()
    cur = conn.cursor()

    # üîπ L·∫•y tr·ª±c ti·∫øp tu·ªïi v√† gi·ªõi t√≠nh t·ª´ h·ªì s∆° NguoiDung
    cur.execute("""
        SELECT 
            DATEDIFF(YEAR, NgaySinh, GETDATE()) AS Tuoi,
            GioiTinh
        FROM NguoiDung
        WHERE ID = ?
    """, (benhnhan_id,))

    row = cur.fetchone()
    conn.close()

    if row:
        return jsonify({
            "tuoi": row.Tuoi,
            "gioitinh": row.GioiTinh
        })
    else:
        return jsonify({"tuoi": None, "gioitinh": None})

# ==========================================
# ü©∫ Ch·∫©n ƒëo√°n b·ªánh tim m·∫°ch + Gi·∫£i th√≠ch SHAP
# ==========================================
@app.route('/diagnose', methods=['GET', 'POST'])
def diagnose():
    if 'user' not in session:
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()
    benhnhans = []
    if session.get('role') == 'doctor':
        cur.execute("SELECT ID, HoTen FROM NguoiDung WHERE Role='patient'")
        benhnhans = [
            {"ID": r.ID, "MaBN": f"BN{r.ID:03}", "HoTen": r.HoTen}
            for r in cur.fetchall()
        ]

    # --- Bi·∫øn kh·ªüi t·∫°o ---
    result = None
    ai_advice = None
    file_result = None
    risk_percent = None
    risk_level = None
    shap_file = None
    threshold = float(request.form.get('threshold', 0.5))

    # ======================
    # üîπ X·ª¨ L√ù NH·∫¨P LI·ªÜU TH·ª¶ C√îNG
    # ======================
    if request.method == 'POST' and 'predict_form' in request.form:
        try:
            benhnhan_id = (
                int(request.form.get('benhnhan_id'))
                if session.get('role') == 'doctor'
                else session['user_id']
            )

            # --- L·∫•y d·ªØ li·ªáu nh·∫≠p tay ---
            age = int(request.form.get('age'))
            gender_raw = request.form.get('gender')
            gender = 1 if gender_raw == 'Nam' else 0
            weight = float(request.form.get('weight'))
            height = float(request.form.get('height'))
            bmi = round(weight / ((height / 100) ** 2), 2)
            systolic = float(request.form.get('systolic'))
            diastolic = float(request.form.get('diastolic'))
            chol = int(request.form.get('cholesterol'))
            glucose = int(request.form.get('glucose'))
            smoking = 1 if request.form.get('smoking') == 'yes' else 0
            alcohol = 1 if request.form.get('alcohol') == 'yes' else 0
            exercise = 1 if request.form.get('exercise') == 'yes' else 0

            # --- D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh ---
            if xgb_model:
                X = np.array([[age, gender, systolic, diastolic,
                               chol, glucose, smoking, alcohol, exercise, bmi]],
                             dtype=float)
                prob = float(xgb_model.predict_proba(X)[0, 1])
                risk_percent = round(prob * 100, 1)
                risk_level = 'high' if prob >= threshold else 'low'
            else:
                score = 0
                if systolic > 140 or diastolic > 90: score += 1
                score += chol
                score += glucose
                if bmi > 30: score += 1
                if smoking: score += 1
                if alcohol: score += 1
                prob = score / 8
                risk_percent = round(prob * 100, 1)
                risk_level = 'high' if prob >= threshold else 'low'

            nguy_co_text = "Nguy c∆° cao" if risk_level == 'high' else "Nguy c∆° th·∫•p"
            result = f"{nguy_co_text} - {risk_percent}%"

            # --- Sinh l·ªùi khuy√™n AI ---
            chol_label = {0: "B√¨nh th∆∞·ªùng", 1: "Cao nh·∫π", 2: "Cao"}
            gluc_label = {0: "B√¨nh th∆∞·ªùng", 1: "Cao nh·∫π", 2: "Cao"}

            prompt = f"""
            B·∫°n l√† b√°c sƒ© tim m·∫°ch.
            D·ªØ li·ªáu b·ªánh nh√¢n:
            - Tu·ªïi: {age}
            - Gi·ªõi t√≠nh: {gender_raw}
            - BMI: {bmi}
            - Huy·∫øt √°p: {systolic}/{diastolic}
            - Cholesterol: {chol_label.get(chol, 'Kh√¥ng r√µ')}
            - ƒê∆∞·ªùng huy·∫øt: {gluc_label.get(glucose, 'Kh√¥ng r√µ')}
            - H√∫t thu·ªëc: {'C√≥' if smoking else 'Kh√¥ng'}
            - U·ªëng r∆∞·ª£u bia: {'C√≥' if alcohol else 'Kh√¥ng'}
            - T·∫≠p th·ªÉ d·ª•c: {'C√≥' if exercise else 'Kh√¥ng'}

            Ng∆∞·ª°ng d·ª± ƒëo√°n: {threshold}.
            H√£y ƒë∆∞a ra l·ªùi khuy√™n ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, ph√π h·ª£p v·ªõi t√¨nh tr·∫°ng tr√™n.
            """

            ai_advice_raw = get_ai_advice_cached(prompt)
            ai_advice = highlight_advice(ai_advice_raw)

            # --- Sinh bi·ªÉu ƒë·ªì SHAP ---
            if xgb_model:
                try:
                    explainer = shap.TreeExplainer(xgb_model)
                    shap_values = explainer.shap_values(X)
                    shap.summary_plot(
                        shap_values, X,
                        feature_names=[
                            'Tu·ªïi', 'Gi·ªõi t√≠nh', 'HATT', 'HATTr', 'Cholesterol',
                            'ƒê∆∞·ªùng huy·∫øt', 'H√∫t thu·ªëc', 'R∆∞·ª£u bia', 'T·∫≠p th·ªÉ d·ª•c', 'BMI'
                        ],
                        show=False
                    )
                    shap_dir = os.path.join(app.root_path, 'static', 'images')
                    os.makedirs(shap_dir, exist_ok=True)
                    shap_file = f"shap_{benhnhan_id}.png"
                    plt.tight_layout()
                    plt.savefig(os.path.join(shap_dir, shap_file), bbox_inches='tight')
                    plt.close()
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi t·∫°o bi·ªÉu ƒë·ªì SHAP: {e}")

            # --- L∆∞u k·∫øt qu·∫£ v√†o CSDL ---
            chol_label = {0: "B√¨nh th∆∞·ªùng", 1: "Cao nh·∫π", 2: "Cao"}
            gluc_label = {0: "B√¨nh th∆∞·ªùng", 1: "Cao nh·∫π", 2: "Cao"}

            bacsi_id = session['user_id'] if session.get('role') == 'doctor' else None
            cur.execute("""
                INSERT INTO ChanDoan
                (BenhNhanID, BacSiID, Tuoi, GioiTinh, BMI, HuyetApTamThu, HuyetApTamTruong,
                Cholesterol, DuongHuyet, HutThuoc, UongCon, TapTheDuc,
                NguyCo, LoiKhuyen, NgayChanDoan)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, GETDATE())
            """, (benhnhan_id, bacsi_id, age, gender_raw, bmi, systolic, diastolic,
                  chol_label.get(chol), gluc_label.get(glucose),
                  smoking, alcohol, exercise, nguy_co_text, ai_advice))
            conn.commit()

        except Exception as e:
            flash(f"L·ªói nh·∫≠p li·ªáu: {e}", "danger")

    # ======================
    # üîπ X·ª¨ L√ù FILE EXCEL
    # ======================
    if request.method == 'POST' and 'data_file' in request.files:
        try:
            file = request.files['data_file']
            if not file:
                flash("‚ö†Ô∏è Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc khi t·∫£i l√™n.", "warning")
                return redirect(url_for('diagnose'))

            filename = file.filename.lower()
            if not filename.endswith(('.xls', '.xlsx')):
                flash("‚ùå Ch·ªâ h·ªó tr·ª£ ƒë·ªãnh d·∫°ng Excel (.xls, .xlsx)", "danger")
                return redirect(url_for('diagnose'))

            df = pd.read_excel(file)
            df.columns = [c.strip().lower() for c in df.columns]

            required_cols = ['age', 'gender', 'ap_hi', 'ap_lo', 'cholesterol',
                             'gluc', 'smoke', 'alco', 'active', 'weight', 'height']
            missing = [c for c in required_cols if c not in df.columns]
            if missing:
                flash(f"‚ö†Ô∏è File thi·∫øu c√°c c·ªôt: {', '.join(missing)}", "danger")
                return redirect(url_for('diagnose'))

            df['bmi'] = (df['weight'] / ((df['height'] / 100) ** 2)).round(2)

            results = []
            for _, row in df.iterrows():
                age = int(row['age'])
                gender_raw = row['gender']
                gender = 1 if str(gender_raw).strip().lower() in ['nam', 'male', '1'] else 0
                systolic = float(row['ap_hi'])
                diastolic = float(row['ap_lo'])
                chol = int(row['cholesterol'])
                gluc = int(row['gluc'])
                smoking = int(row['smoke'])
                alcohol = int(row['alco'])
                exercise = int(row['active'])
                bmi = float(row['bmi'])

                if xgb_model:
                    X = np.array([[age, gender, systolic, diastolic,
                                   chol, gluc, smoking, alcohol, exercise, bmi]],
                                 dtype=float)
                    prob = float(xgb_model.predict_proba(X)[0, 1])
                else:
                    prob = 0.5

                risk_percent = round(prob * 100, 1)
                risk_level = "Nguy c∆° cao" if prob >= threshold else "Nguy c∆° th·∫•p"

                results.append({
                    "Tu·ªïi": age,
                    "Gi·ªõi t√≠nh": gender_raw,
                    "Huy·∫øt √°p": f"{systolic}/{diastolic}",
                    "Cholesterol": chol,
                    "ƒê∆∞·ªùng huy·∫øt": gluc,
                    "BMI": bmi,
                    "H√∫t thu·ªëc": "C√≥" if smoking else "Kh√¥ng",
                    "R∆∞·ª£u/Bia": "C√≥" if alcohol else "Kh√¥ng",
                    "T·∫≠p th·ªÉ d·ª•c": "C√≥" if exercise else "Kh√¥ng",
                    "Nguy c∆°": risk_level,
                    "X√°c su·∫•t (%)": risk_percent
                })

            file_result = pd.DataFrame(results).to_html(
                index=False,
                classes="table table-hover table-striped text-center align-middle small shadow-sm rounded-3"
            )

            flash("‚úÖ D·ª± ƒëo√°n t·ª´ file Excel ƒë√£ ho√†n t·∫•t!", "success")

        except Exception as e:
            flash(f"‚ùå L·ªói khi x·ª≠ l√Ω file Excel: {e}", "danger")

    conn.close()
    return render_template(
        'diagnose.html',
        benhnhans=benhnhans,
        result=result,
        risk_percent=risk_percent,
        risk_level=risk_level,
        threshold=threshold,
        ai_advice=ai_advice,
        file_result=file_result,
        shap_file=shap_file
    )

# ==========================================
# üß† H√†m t√¥ ƒë·∫≠m l·ªùi khuy√™n AI (1 m√†u nh·∫•n - FIX BUG "600;'>")
# ==========================================
import re

def highlight_advice(text):
    """üí° L√†m n·ªïi b·∫≠t √Ω ch√≠nh trong l·ªùi khuy√™n AI ch·ªâ v·ªõi 1 m√†u nh·∫•n, an to√†n kh√¥ng l·ªói HTML."""
    if not text:
        return ""

    # X√≥a k√Ω t·ª± markdown (** ho·∫∑c *)
    text = re.sub(r'\*{1,3}', '', text)

    # üîπ Nh·∫•n m·∫°nh t·ª´ kh√≥a (t√≠ch c·ª±c ho·∫∑c c·∫£nh b√°o)
    keywords = [
        r"(h√£y|n√™n|c·∫ßn|duy tr√¨|gi·ªØ|ki·ªÉm so√°t|theo d√µi|tr√°nh|kh√¥ng n√™n|quan tr·ªçng|nguy c∆°|cao|b√©o ph√¨|h√∫t thu·ªëc|r∆∞·ª£u|bia|ng·ªß ƒë·ªß|t·∫≠p luy·ªán|ƒÉn u·ªëng|ƒëi·ªÅu ch·ªânh)"
    ]

    for kw in keywords:
        text = re.sub(
            kw,
            lambda m: f"<b class='text-primary fw-semibold'>{m.group(0)}</b>",
            text,
            flags=re.IGNORECASE
        )

    # üîπ L√†m n·ªïi b·∫≠t c√°c con s·ªë / ph·∫ßn trƒÉm / ƒë∆°n v·ªã ƒëo
    text = re.sub(
        r"\b\d+(\.\d+)?\s*(%|mmHg|kg|cm)?\b",
        lambda m: f"<b class='text-primary'>{m.group(0)}</b>",
        text
    )

    # üîπ Thay newline b·∫±ng <br> cho tr√¨nh b√†y ƒë·∫πp
    text = re.sub(r'\n+', '<br>', text.strip())

    # üîπ G√≥i kh·ªëi n·ªôi dung
    text = f"""
    <div style="
        text-align: justify;
        line-height: 1.8;
        font-size: 15px;
        color: #212529;
    ">
        {text}
    </div>
    """

    return text

# ==========================================
# üìú L·ªãch s·ª≠ ch·∫©n ƒëo√°n (ph√¢n quy·ªÅn + l·ªçc b·ªánh nh√¢n cho b√°c sƒ©)
# ==========================================
@app.route('/history')
def history():
    if 'user' not in session:
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()

    # ===== L·∫•y c√°c tham s·ªë l·ªçc t·ª´ URL =====
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    patient_id = request.args.get('patient_id')
    doctor_id = request.args.get('doctor_id')
    risk_filter = request.args.get('risk_filter')
    sort_order = request.args.get('sort', 'desc')

    # ===== ƒêi·ªÅu ki·ªán m·∫∑c ƒë·ªãnh =====
    where_clause = "WHERE 1=1"
    params = []

    # ===== Ph√¢n quy·ªÅn =====
    role = session.get('role')

    if role == 'doctor':
        # üë®‚Äç‚öïÔ∏è B√°c sƒ© xem c√°c ca do m√¨nh ch·∫©n ƒëo√°n
        where_clause += " AND BacSiID = ?"
        params.append(session['user_id'])
        # V√† c√≥ th·ªÉ l·ªçc th√™m theo b·ªánh nh√¢n
        if patient_id:
            where_clause += " AND BenhNhanID = ?"
            params.append(patient_id)

    elif role == 'patient':
        # üßë‚Äçü¶± B·ªánh nh√¢n xem to√†n b·ªô c√°c ca c·ªßa m√¨nh
        where_clause += " AND BenhNhanID = ?"
        params.append(session['user_id'])

    else:
        # üßë‚Äçüíº Admin xem to√†n b·ªô, c√≥ th·ªÉ l·ªçc theo b√°c sƒ© ho·∫∑c b·ªánh nh√¢n
        if doctor_id:
            where_clause += " AND BacSiID = ?"
            params.append(doctor_id)
        if patient_id:
            where_clause += " AND BenhNhanID = ?"
            params.append(patient_id)

    # ===== L·ªçc theo ng√†y =====
    if start_date:
        where_clause += " AND NgayChanDoan >= CONVERT(DATE, ?)"
        params.append(start_date)
    if end_date:
        where_clause += " AND NgayChanDoan <= CONVERT(DATE, ?)"
        params.append(end_date)

    # ===== L·ªçc theo nguy c∆° =====
    if risk_filter == 'high':
        where_clause += " AND LOWER(NguyCo) LIKE '%cao%'"
    elif risk_filter == 'low':
        where_clause += " AND LOWER(NguyCo COLLATE SQL_Latin1_General_Cp1253_CI_AI) LIKE '%thap%'"

    # ===== Truy v·∫•n ch√≠nh =====
    query = f"""
        SELECT ChanDoanID, BenhNhanID, TenBenhNhan, GioiTinh, Tuoi, TenBacSi, NgayChanDoan,
       BMI, HuyetApTamThu, HuyetApTamTruong, Cholesterol, DuongHuyet,
       HutThuoc, UongCon, TapTheDuc, NguyCo, LoiKhuyen

        FROM V_LichSuChanDoan
        {where_clause}
        ORDER BY NgayChanDoan {'DESC' if sort_order == 'desc' else 'ASC'}
    """

    cur.execute(query, params)
    records = cur.fetchall()
    conn.close()

    # ‚úÖ ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
    total_records = len(records)

    # ‚úÖ Highlight l·ªùi khuy√™n
    try:
        from app import highlight_advice
        for r in records:
            if hasattr(r, "LoiKhuyen") and r.LoiKhuyen:
                r.LoiKhuyen = highlight_advice(r.LoiKhuyen)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói highlight: {e}")

    # ===== Danh s√°ch l·ªçc =====
    doctors, patients = [], []

    if role == 'doctor':
        # Danh s√°ch b·ªánh nh√¢n m√† b√°c sƒ© ƒë√≥ ƒë√£ ch·∫©n ƒëo√°n
        conn2 = get_connection()
        cur2 = conn2.cursor()
        cur2.execute("""
            SELECT DISTINCT bn.ID, bn.HoTen 
            FROM ChanDoan cd 
            JOIN NguoiDung bn ON cd.BenhNhanID = bn.ID
            WHERE cd.BacSiID = ?
        """, (session['user_id'],))
        patients = cur2.fetchall()
        conn2.close()

    elif role == 'admin':
        # Danh s√°ch b√°c sƒ© v√† b·ªánh nh√¢n cho admin
        conn2 = get_connection()
        cur2 = conn2.cursor()
        cur2.execute("SELECT ID, HoTen FROM NguoiDung WHERE Role='doctor'")
        doctors = cur2.fetchall()
        cur2.execute("SELECT ID, HoTen FROM NguoiDung WHERE Role='patient'")
        patients = cur2.fetchall()
        conn2.close()

    # ===== Render =====
    return render_template(
        'history.html',
        records=records,
        doctors=doctors,
        patients=patients,
        start_date=start_date,
        end_date=end_date,
        patient_id=patient_id,
        doctor_id=doctor_id,
        risk_filter=risk_filter,
        sort_order=sort_order,
        total_records=total_records
    )


# ==========================================
# üóëÔ∏è X√≥a b·∫£n ghi ch·∫©n ƒëo√°n
# ==========================================
@app.route('/delete_history/<int:id>', methods=['POST'])
def delete_history(id):
    if 'user' not in session:
        return redirect(url_for('login'))

    role = session.get('role')
    if role not in ['doctor', 'admin','patient']:
        flash("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b·∫£n ghi ch·∫©n ƒëo√°n.", "danger")
        return redirect(url_for('history'))

    conn = get_connection()
    cur = conn.cursor()
    try:
        # ‚úÖ X√≥a theo ID (kh√≥a ch√≠nh)
        cur.execute("DELETE FROM ChanDoan WHERE ID = ?", (id,))
        conn.commit()
        flash("üóëÔ∏è ƒê√£ x√≥a b·∫£n ghi ch·∫©n ƒëo√°n th√†nh c√¥ng!", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a b·∫£n ghi: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for('history'))

# ==========================================
# Ch·ªânh s·ª≠a l·ªùi khuy√™n (ch·ªâ d√†nh cho b√°c sƒ©)
# ==========================================
@app.route('/edit_advice/<int:id>', methods=['POST'])
def edit_advice(id):
    if 'user' not in session or session.get('role') != 'doctor':
        flash("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a l·ªùi khuy√™n.", "danger")
        return redirect(url_for('login'))

    new_advice = request.form.get('loi_khuyen', '').strip()

    # üßπ L√†m s·∫°ch: lo·∫°i b·ªè m·ªçi th·∫ª HTML, style c√≤n s√≥t l·∫°i
    import re
    from html import unescape
    clean_text = re.sub(r'<[^>]+>', '', new_advice)   # x√≥a th·∫ª HTML
    clean_text = unescape(clean_text)                 # gi·∫£i m√£ HTML entities (&nbsp;)
    clean_text = re.sub(r'\s{2,}', ' ', clean_text)   # g·ªôp kho·∫£ng tr·∫Øng

    conn = get_connection()
    cur = conn.cursor()

    try:
        cur.execute("""
            UPDATE ChanDoan
            SET LoiKhuyen = ?
            WHERE ID = ?
        """, (clean_text, id))
        conn.commit()
        flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªùi khuy√™n cho b·ªánh nh√¢n.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t l·ªùi khuy√™n: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for('history'))


# ==========================================
# Qu·∫£n l√Ω t√†i kho·∫£n & h·ªì s∆° b·ªánh nh√¢n (phi√™n b·∫£n gi·ªõi h·∫°n quy·ªÅn)
# ==========================================
@app.route('/manage_accounts', methods=['GET', 'POST'])
def manage_accounts():
    # ‚úÖ Ch·ªâ cho ph√©p b√°c sƒ© truy c·∫≠p
    if 'user' not in session or session.get('role') != 'doctor':
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()

    # ================================
    # ‚ûï TH√äM b·ªánh nh√¢n m·ªõi
    # ================================
    if request.method == 'POST' and 'add_patient' in request.form:
        ho_ten = request.form.get('ho_ten')
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh')
        email = request.form.get('email')
        mat_khau = request.form.get('mat_khau')
        dien_thoai = request.form.get('dien_thoai')
        dia_chi = request.form.get('dia_chi')

        try:
            cur.execute("""
                INSERT INTO NguoiDung (HoTen, GioiTinh, NgaySinh, Email, MatKhau, DienThoai, DiaChi, Role)
                VALUES (?, ?, ?, ?, ?, ?, ?, 'patient')
            """, (ho_ten, gioi_tinh, ngay_sinh, email, mat_khau, dien_thoai, dia_chi))
            conn.commit()
            flash("‚úÖ ƒê√£ th√™m b·ªánh nh√¢n m·ªõi th√†nh c√¥ng!", "success")
        except Exception as e:
            conn.rollback()
            flash(f"‚ùå L·ªói khi th√™m b·ªánh nh√¢n: {e}", "danger")

    # ================================
    # üóëÔ∏è X√ìA t√†i kho·∫£n b·ªánh nh√¢n (ch·ªâ n·∫øu b√°c sƒ© t·ª´ng ch·∫©n ƒëo√°n)
    # ================================
    if request.method == 'POST' and 'delete_patient' in request.form:
        patient_id = int(request.form.get('id'))
        doctor_id = session['user_id']

        # Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi x√≥a
        cur.execute("""
            SELECT COUNT(*) FROM ChanDoan 
            WHERE BacSiID=? AND BenhNhanID=?
        """, (doctor_id, patient_id))
        has_permission = cur.fetchone()[0] > 0

        if not has_permission:
            flash("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b·ªánh nh√¢n n√†y (ch∆∞a t·ª´ng ch·∫©n ƒëo√°n).", "danger")
        else:
            try:
                cur.execute("DELETE FROM ChanDoan WHERE BenhNhanID=?", (patient_id,))
                cur.execute("DELETE FROM NguoiDung WHERE ID=?", (patient_id,))
                conn.commit()
                flash("üóëÔ∏è ƒê√£ x√≥a t√†i kho·∫£n v√† to√†n b·ªô l·ªãch s·ª≠ ch·∫©n ƒëo√°n c·ªßa b·ªánh nh√¢n.", "success")
            except Exception as e:
                conn.rollback()
                flash(f"‚ùå L·ªói khi x√≥a: {e}", "danger")

    # ================================
    # ‚úèÔ∏è C·∫¨P NH·∫¨T th√¥ng tin b·ªánh nh√¢n (ch·ªâ n·∫øu b√°c sƒ© t·ª´ng ch·∫©n ƒëo√°n)
    # ================================
    if request.method == 'POST' and 'update_patient' in request.form:
        patient_id = int(request.form.get('id'))
        doctor_id = session['user_id']

        cur.execute("""
            SELECT COUNT(*) FROM ChanDoan 
            WHERE BacSiID=? AND BenhNhanID=?
        """, (doctor_id, patient_id))
        has_permission = cur.fetchone()[0] > 0

        if not has_permission:
            flash("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b·ªánh nh√¢n n√†y (ch∆∞a t·ª´ng ch·∫©n ƒëo√°n).", "danger")
        else:
            try:
                cur.execute("""
                    UPDATE NguoiDung
                    SET HoTen=?, GioiTinh=?, NgaySinh=?, DienThoai=?, DiaChi=?
                    WHERE ID=?
                """, (
                    request.form.get('ho_ten'),
                    request.form.get('gioi_tinh'),
                    request.form.get('ngay_sinh'),
                    request.form.get('dien_thoai'),
                    request.form.get('dia_chi'),
                    patient_id
                ))
                conn.commit()
                flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n.", "success")
            except Exception as e:
                conn.rollback()
                flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}", "danger")

    # ================================
    # üîé T√åM KI·∫æM b·ªánh nh√¢n
    # ================================
    search = request.args.get('search', '').strip()

    if search:
        cur.execute("""
            SELECT ID, HoTen, Email, GioiTinh, NgaySinh, DienThoai, DiaChi
            FROM NguoiDung
            WHERE Role='patient' AND (HoTen LIKE ? OR Email LIKE ?)
            ORDER BY HoTen
        """, (f"%{search}%", f"%{search}%"))
    else:
        cur.execute("""
            SELECT ID, HoTen, Email, GioiTinh, NgaySinh, DienThoai, DiaChi
            FROM NguoiDung
            WHERE Role='patient'
            ORDER BY HoTen
        """)

    raw_patients = cur.fetchall()

    # ================================
    # üîê L·∫•y danh s√°ch b·ªánh nh√¢n b√°c sƒ© t·ª´ng ch·∫©n ƒëo√°n
    # ================================
    cur.execute("""
        SELECT DISTINCT BenhNhanID FROM ChanDoan WHERE BacSiID=?
    """, (session['user_id'],))
    my_patients = {r.BenhNhanID for r in cur.fetchall()}

    # ================================
    # X·ª¨ L√ù d·ªØ li·ªáu hi·ªÉn th·ªã
    # ================================
    patients = []
    for p in raw_patients:
        if p.NgaySinh and hasattr(p.NgaySinh, "strftime"):
            ngay_sinh_str = p.NgaySinh.strftime("%d/%m/%Y")
            ngay_sinh_val = p.NgaySinh.strftime("%Y-%m-%d")
        else:
            ngay_sinh_str = p.NgaySinh if p.NgaySinh else "‚Äî"
            ngay_sinh_val = p.NgaySinh if p.NgaySinh else ""

        patients.append({
            "ID": p.ID,
            "HoTen": p.HoTen,
            "Email": p.Email,
            "GioiTinh": p.GioiTinh,
            "NgaySinh_str": ngay_sinh_str,
            "NgaySinh_val": ngay_sinh_val,
            "DienThoai": p.DienThoai,
            "DiaChi": p.DiaChi
        })

    conn.close()

    # ‚úÖ Truy·ªÅn th√™m danh s√°ch quy·ªÅn my_patients sang template
    return render_template(
        'manage_accounts.html',
        patients=patients,
        search=search,
        my_patients=my_patients
    )

from flask import flash
from werkzeug.security import check_password_hash, generate_password_hash

import re
from flask import jsonify

# ==========================================
# üîê ƒê·ªïi m·∫≠t kh·∫©u (x·ª≠ l√Ω AJAX)
# ==========================================
@app.route('/change_password', methods=['POST'])
def change_password():
    if 'user' not in session:
        return jsonify({"success": False, "message": "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."}), 403

    old_pw = request.form.get('old_password')
    new_pw = request.form.get('new_password')
    confirm_pw = request.form.get('confirm_password')

    if not old_pw or not new_pw or not confirm_pw:
        return jsonify({"success": False, "message": "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin."})

    if new_pw != confirm_pw:
        return jsonify({"success": False, "message": "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp."})

    # üß© Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u (√≠t nh·∫•t 8 k√Ω t·ª±, c√≥ hoa, s·ªë, ƒë·∫∑c bi·ªát)
    if not re.match(r'^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$', new_pw):
        return jsonify({
            "success": False,
            "message": "M·∫≠t kh·∫©u ph·∫£i ‚â•8 k√Ω t·ª±, ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 s·ªë v√† 1 k√Ω t·ª± ƒë·∫∑c bi·ªát."
        })

    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT MatKhau FROM NguoiDung WHERE ID=?", (session['user_id'],))
    row = cur.fetchone()

    if not row or row.MatKhau != old_pw:
        conn.close()
        return jsonify({"success": False, "message": "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c."})

    cur.execute("UPDATE NguoiDung SET MatKhau=? WHERE ID=?", (new_pw, session['user_id']))
    conn.commit()
    conn.close()
    return jsonify({"success": True, "message": "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!"})


# ==========================================
# H·ªì s∆° c√° nh√¢n
# ==========================================
@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user' not in session:
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()
    if request.method == 'POST':
        cur.execute("""
            UPDATE NguoiDung
            SET HoTen=?, DienThoai=?, NgaySinh=?, GioiTinh=?, DiaChi=?
            WHERE ID=?
        """, (request.form.get('ho_ten'),
              request.form.get('dien_thoai'),
              request.form.get('ngay_sinh'),
              request.form.get('gioi_tinh'),
              request.form.get('dia_chi'),
              session['user_id']))
        conn.commit()

    cur.execute("""
        SELECT HoTen, Email, Role, DienThoai, NgaySinh, GioiTinh, DiaChi
        FROM NguoiDung WHERE ID=?
    """, (session['user_id'],))
    user_info = cur.fetchone()
    conn.close()
    return render_template('profile.html', user_info=user_info)
# ==========================================
# üì§ Xu·∫•t b√°o c√°o k·∫øt qu·∫£ ch·∫©n ƒëo√°n ra Excel 
# ==========================================
@app.route('/export_diagnosis', methods=['POST'])
def export_diagnosis():
    from openpyxl import Workbook
    from openpyxl.drawing.image import Image as ExcelImage
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from io import BytesIO
    from flask import send_file
    from datetime import datetime
    import os, re

    # ===== D·ªØ li·ªáu t·ª´ form =====
    data = {key: request.form.get(key, '') for key in [
        'age', 'gender', 'bmi', 'systolic', 'diastolic', 'cholesterol',
        'glucose', 'smoking', 'alcohol', 'exercise',
        'risk_percent', 'risk_level', 'ai_advice', 'shap_file', 'benhnhan_id'
    ]}

    # ===== L·∫•y t√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p & vai tr√≤ =====
    user_name = session.get('user', 'Ng∆∞·ªùi d√πng')
    user_role = session.get('role', 'patient')

    # ===== X√°c ƒë·ªãnh t√™n b·ªánh nh√¢n v√† b√°c sƒ© =====
    patient_name = None
    doctor_name = None

    if user_role == 'doctor':
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT HoTen FROM NguoiDung WHERE ID = ?", data.get('benhnhan_id'))
        row = cur.fetchone()
        conn.close()
        patient_name = row[0] if row else "Kh√¥ng x√°c ƒë·ªãnh"
        doctor_name = user_name
    else:
        patient_name = user_name
        doctor_name = "‚Äî"

    # ===== T·∫°o workbook =====
    wb = Workbook()
    ws = wb.active
    ws.title = "B√°o c√°o ch·∫©n ƒëo√°n"

    # ===== Style =====
    title_font = Font(size=18, bold=True, color="1F4E78")
    header_font = Font(size=13, bold=True, color="FFFFFF")
    section_font = Font(size=12, bold=True, color="1F4E78")
    normal_font = Font(size=11)
    advice_font = Font(size=12, color="000000")
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    left = Alignment(horizontal="left", vertical="center", wrap_text=True)
    wrap = Alignment(wrap_text=True, vertical="top")
    border = Border(
        left=Side(style="thin", color="000000"),
        right=Side(style="thin", color="000000"),
        top=Side(style="thin", color="000000"),
        bottom=Side(style="thin", color="000000")
    )
    fill_header = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    fill_sub = PatternFill(start_color="E9F3FF", end_color="E9F3FF", fill_type="solid")
    fill_high = PatternFill(start_color="F8D7DA", end_color="F8D7DA", fill_type="solid")
    fill_low = PatternFill(start_color="D1E7DD", end_color="D1E7DD", fill_type="solid")

    # ===== Ti√™u ƒë·ªÅ =====
    ws.merge_cells("A1:E1")
    ws["A1"] = "B√ÅO C√ÅO K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN TIM M·∫†CH"
    ws["A1"].font = title_font
    ws["A1"].alignment = center
    ws.append([])

    # ===== I. Th√¥ng tin chung =====
    ws.merge_cells("A3:E3")
    ws["A3"] = "I. TH√îNG TIN CHUNG"
    ws["A3"].font = section_font
    ws["A3"].alignment = left

    ws.append(["T√™n b·ªánh nh√¢n", patient_name])
    ws.append(["B√°c sƒ© ch·∫©n ƒëo√°n", doctor_name])
    ws.append(["Ng√†y t·∫°o b√°o c√°o", datetime.now().strftime("%d/%m/%Y %H:%M")])
    ws.append([])

    # ===== II. D·ªØ li·ªáu ƒë·∫ßu v√†o =====
    ws.merge_cells("A7:E7")
    ws["A7"] = "II. D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO"
    ws["A7"].font = section_font
    ws["A7"].alignment = left

    ws.append(["Thu·ªôc t√≠nh", "Gi√° tr·ªã", "Thu·ªôc t√≠nh", "Gi√° tr·ªã"])
    for cell in ws[8]:
        cell.font = header_font
        cell.fill = fill_header
        cell.border = border
        cell.alignment = center

    input_data = [
        ["Tu·ªïi", data['age'], "Gi·ªõi t√≠nh", data['gender']],
        ["BMI", data['bmi'], "Huy·∫øt √°p (HATT/HATTr)", f"{data['systolic']}/{data['diastolic']}"],
        ["Cholesterol", data['cholesterol'], "ƒê∆∞·ªùng huy·∫øt", data['glucose']],
        ["H√∫t thu·ªëc", "C√≥" if data['smoking']=="yes" else "Kh√¥ng", "R∆∞·ª£u/Bia", "C√≥" if data['alcohol']=="yes" else "Kh√¥ng"],
        ["T·∫≠p th·ªÉ d·ª•c", "C√≥" if data['exercise']=="yes" else "Kh√¥ng", "", ""]
    ]
    for row in input_data:
        ws.append(row)
        for cell in ws[ws.max_row]:
            cell.font = normal_font
            cell.border = border
            cell.alignment = left

    ws.append([])

        # ===== III. K·∫øt qu·∫£ ch·∫©n ƒëo√°n =====
    ws.merge_cells(f"A{ws.max_row+1}:E{ws.max_row+1}")
    ws[f"A{ws.max_row}"] = "III. K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN"
    ws[f"A{ws.max_row}"].font = section_font
    ws[f"A{ws.max_row}"].alignment = left

    ws.append(["Nguy c∆°", "T·ªâ l·ªá (%)", "ƒê√°nh gi√°", ""])
    for cell in ws[ws.max_row]:
        cell.font = header_font
        cell.fill = fill_header
        cell.border = border
        cell.alignment = center

    ws.append([
        "Cao" if data['risk_level'] == 'high' else "Th·∫•p",
        data['risk_percent'] + "%",
        "‚ö†Ô∏è C·∫ßn theo d√µi" if data['risk_level'] == 'high' else "‚úÖ ·ªîn ƒë·ªãnh",
        ""
    ])
    for cell in ws[ws.max_row]:
        cell.font = normal_font
        cell.border = border
        cell.alignment = center
        cell.fill = fill_high if data['risk_level'] == 'high' else fill_low

    ws.append([])

    import re
    from html import unescape

    # ===== L√†m s·∫°ch v√† ƒë·ªãnh d·∫°ng l·ªùi khuy√™n =====
    advice_raw = data.get('ai_advice') or "Ch∆∞a c√≥ l·ªùi khuy√™n t·ª´ AI."

    # ‚úÖ B·ªè to√†n b·ªô th·∫ª HTML & thu·ªôc t√≠nh style
    advice_text = re.sub(r'style="[^"]*"', '', advice_raw)     # x√≥a thu·ªôc t√≠nh style
    advice_text = re.sub(r'<[^>]+>', '', advice_text)          # x√≥a th·∫ª HTML c√≤n l·∫°i
    advice_text = unescape(advice_text)                        # gi·∫£i m√£ HTML entity (&nbsp;,...)
    advice_text = re.sub(r'\s*\n\s*', '\n', advice_text.strip())
    advice_text = re.sub(r'\s{2,}', ' ', advice_text)

    # ‚úÖ T·ª± ƒë·ªông ng·∫Øt d√≤ng sau d·∫•u ch·∫•m (khi sau ƒë√≥ l√† ch·ªØ in hoa ho·∫∑c ti·∫øng Vi·ªát c√≥ d·∫•u)
    advice_text = re.sub(r'\.\s*(?=[A-Z√Ä-·ª∏])', '.\n', advice_text)

    # ‚úÖ Ng·∫Øt d√≤ng tr∆∞·ªõc c√°c c·ª•m t·ª´ nh∆∞ ‚ÄúL·ªùi khuy√™n‚Äù, ‚ÄúKhuy·∫øn ngh·ªã‚Äù, ‚ÄúT√≥m l·∫°i‚Äù
    advice_text = re.sub(r'(?=\b(L·ªùi khuy√™n|Khuy·∫øn ngh·ªã|T√≥m l·∫°i)\b)', '\n', advice_text)

    # ‚úÖ Lo·∫°i b·ªè d√≤ng tr·ªëng d∆∞
    advice_text = re.sub(r'\n{2,}', '\n', advice_text).strip()

    # ‚úÖ Ghi ra Excel (xu·ªëng d√≤ng, cƒÉn ƒë·ªÅu 2 b√™n)
    start_row = ws.max_row + 1
    end_row = start_row + 8
    ws.merge_cells(f"A{start_row}:E{end_row}")
    cell = ws[f"A{start_row}"]
    cell.value = advice_text
    cell.alignment = Alignment(horizontal="justify", vertical="top", wrap_text=True)
    cell.font = advice_font
    cell.border = border
    cell.fill = fill_sub

    # ===== V. Bi·ªÉu ƒë·ªì SHAP =====
    shap_path = os.path.join(app.root_path, 'static', 'images', data['shap_file']) if data['shap_file'] else None
    if shap_path and os.path.exists(shap_path):
        ws.merge_cells(f"A{ws.max_row+1}:E{ws.max_row+1}")
        ws[f"A{ws.max_row}"] = "V. GI·∫¢I TH√çCH K·∫æT QU·∫¢ B·∫∞NG BI·ªÇU ƒê·ªí SHAP"
        ws[f"A{ws.max_row}"].font = section_font
        ws[f"A{ws.max_row}"].alignment = left
        try:
            img = ExcelImage(shap_path)
            img.width = 520
            img.height = 320
            ws.add_image(img, f"A{ws.max_row+1}")
        except Exception as e:
            ws.append([f"L·ªói khi ch√®n h√¨nh: {e}"])

    # ===== Footer =====
    ws.append([])
    ws.merge_cells(f"A{ws.max_row}:E{ws.max_row}")
    ws[f"A{ws.max_row}"] = f"üìÖ B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi: {doctor_name or user_name} ‚Äî {datetime.now().strftime('%H:%M, %d/%m/%Y')}"
    ws[f"A{ws.max_row}"].alignment = center
    ws[f"A{ws.max_row}"].font = Font(size=10, italic=True, color="777777")

    # ===== CƒÉn ch·ªânh ƒë·ªô r·ªông =====
    ws.column_dimensions["A"].width = 22
    ws.column_dimensions["B"].width = 20
    ws.column_dimensions["C"].width = 25
    ws.column_dimensions["D"].width = 25
    ws.column_dimensions["E"].width = 10

    # ===== Xu·∫•t file =====
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    filename = f"BaoCao_ChanDoan_{patient_name.replace(' ', '_')}.xlsx"

    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# ==========================================
# üö™ ƒêƒÉng xu·∫•t
# ==========================================
@app.route('/logout')
def logout():
    if 'user' in session:
        name = session.get('user', 'Ng∆∞·ªùi d√πng')
        session.clear()
        flash(f"üëã {name}, b·∫°n ƒë√£ ƒëƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng th√†nh c√¥ng!", "success")
    else:
        flash("‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!", "warning")
    return redirect(url_for('login'))
# =========================================================
# üìä DASHBOARD TH·ªêNG K√ä (Admin - B·∫£n n√¢ng c·∫•p chuy√™n s√¢u)
# =========================================================
@app.route('/admin/dashboard')
def admin_dashboard():
    # --- Ki·ªÉm tra quy·ªÅn truy c·∫≠p ---
    if 'user' not in session or session.get('role') != 'admin':
        flash("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!", "danger")
        return redirect(url_for('login'))

    conn = get_connection()
    cur = conn.cursor()

    # ========================== 1Ô∏è‚É£ T·ªîNG QUAN ==========================
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='doctor'")
    total_doctors = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='patient'")
    total_patients = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM ChanDoan")
    total_diagnoses = cur.fetchone()[0]

    # ========================== 2Ô∏è‚É£ XU H∆Ø·ªöNG CH·∫®N ƒêO√ÅN ==========================
    cur.execute("""
        SELECT FORMAT(NgayChanDoan, 'MM-yyyy') AS Thang,
               COUNT(*) AS SoLuong,
               SUM(CASE WHEN LOWER(NguyCo) LIKE '%cao%' THEN 1 ELSE 0 END) AS SoCao
        FROM ChanDoan
        GROUP BY FORMAT(NgayChanDoan, 'MM-yyyy')
        ORDER BY MIN(NgayChanDoan)
    """)
    monthly = cur.fetchall()
    months = [row.Thang for row in monthly]
    counts = [row.SoLuong for row in monthly]
    high_risk = [row.SoCao for row in monthly]

    # ========================== 3Ô∏è‚É£ T·ª∂ L·ªÜ NGUY C∆† ==========================
    cur.execute("""
        SELECT NguyCo, COUNT(*) AS SoLuong
        FROM ChanDoan
        GROUP BY NguyCo
    """)
    risk_data = cur.fetchall()
    risk_labels = [row.NguyCo for row in risk_data]
    risk_values = [row.SoLuong for row in risk_data]

    # ========================== 4Ô∏è‚É£ TOP B√ÅC Sƒ® ==========================
    cur.execute("""
        SELECT TOP 5 bs.HoTen, COUNT(cd.ID) AS SoCa,
               SUM(CASE WHEN cd.NguyCo LIKE '%cao%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS TyLeCao
        FROM ChanDoan cd
        JOIN NguoiDung bs ON cd.BacSiID = bs.ID
        GROUP BY bs.HoTen
        ORDER BY SoCa DESC
    """)
    top_doctors = cur.fetchall()
    top_names = [row.HoTen for row in top_doctors]
    top_counts = [row.SoCa for row in top_doctors]
    top_rates = [round(row.TyLeCao, 1) for row in top_doctors]

    # ========================== 5Ô∏è‚É£ TRUNG B√åNH CH·ªà S·ªê Y KHOA ==========================
    cur.execute("""
        SELECT 
            ROUND(AVG(BMI), 1) AS AvgBMI,
            ROUND(AVG(HuyetApTamThu), 0) AS AvgHATT,
            ROUND(AVG(HuyetApTamTruong), 0) AS AvgHATTr,
            SUM(CASE WHEN HutThuoc=1 THEN 1 ELSE 0 END)*100.0/COUNT(*) AS SmokePercent,
            SUM(CASE WHEN UongCon=1 THEN 1 ELSE 0 END)*100.0/COUNT(*) AS AlcoPercent,
            SUM(CASE WHEN TapTheDuc=1 THEN 1 ELSE 0 END)*100.0/COUNT(*) AS ActivePercent
        FROM ChanDoan
    """)
    row = cur.fetchone()
    avg_bmi = row.AvgBMI or 0
    avg_systolic = row.AvgHATT or 0
    avg_diastolic = row.AvgHATTr or 0
    smoke_percent = round(row.SmokePercent or 0, 1)
    alco_percent = round(row.AlcoPercent or 0, 1)
    active_percent = round(row.ActivePercent or 0, 1)

    # ========================== 6Ô∏è‚É£ HI·ªÜU SU·∫§T B√ÅC Sƒ® ==========================
    cur.execute("""
        SELECT ND.HoTen AS BacSi,
               COUNT(CD.ID) AS SoCa,
               SUM(CASE WHEN CD.NguyCo LIKE '%cao%' THEN 1 ELSE 0 END)*100.0/COUNT(*) AS TyLeCao
        FROM ChanDoan CD
        JOIN NguoiDung ND ON CD.BacSiID = ND.ID
        GROUP BY ND.HoTen
        ORDER BY SoCa DESC
    """)
    perf_rows = cur.fetchall()
    perf_names = [r.BacSi for r in perf_rows]
    perf_cases = [r.SoCa for r in perf_rows]
    perf_rate = [round(r.TyLeCao or 0, 1) for r in perf_rows]

    # ========================== 7Ô∏è‚É£ T·ªîNG S·ªê B·ªÜNH NH√ÇN C√ì CH·∫®N ƒêO√ÅN ==========================
    cur.execute("SELECT COUNT(DISTINCT BenhNhanID) FROM ChanDoan")
    diagnosed_patients = cur.fetchone()[0]

    conn.close()

    return render_template(
        'admin_dashboard.html',
        total_doctors=total_doctors,
        total_patients=total_patients,
        total_diagnoses=total_diagnoses,
        diagnosed_patients=diagnosed_patients,
        months=months,
        counts=counts,
        high_risk=high_risk,
        risk_labels=risk_labels,
        risk_values=risk_values,
        top_names=top_names,
        top_counts=top_counts,
        top_rates=top_rates,
        avg_bmi=avg_bmi,
        avg_systolic=avg_systolic,
        avg_diastolic=avg_diastolic,
        smoke_percent=smoke_percent,
        alco_percent=alco_percent,
        active_percent=active_percent,
        perf_names=perf_names,
        perf_cases=perf_cases,
        perf_rate=perf_rate
    )

# =========================================================
# üßë‚Äç‚öïÔ∏è Qu·∫£n l√Ω ng∆∞·ªùi d√πng (B√°c sƒ© / B·ªánh nh√¢n) ‚Äî Admin
# =========================================================
@app.route('/admin/manage_users', methods=['GET', 'POST'])
def admin_manage_users():
    if 'user' not in session or session.get('role') != 'admin':
        flash("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!", "danger")
        return redirect(url_for('login'))

    import datetime
    conn = get_connection()
    cur = conn.cursor()

    # X√°c ƒë·ªãnh lo·∫°i ng∆∞·ªùi d√πng ƒëang qu·∫£n l√Ω
    role_type = request.args.get('type', 'doctor')  # m·∫∑c ƒë·ªãnh l√† doctor
    title_map = {'doctor': 'B√°c sƒ©', 'patient': 'B·ªánh nh√¢n'}
    page_title = f"Qu·∫£n l√Ω {title_map.get(role_type, 'Ng∆∞·ªùi d√πng')}"

    # ===================================================
    # üü¢ TH√äM NG∆Ø·ªúI D√ôNG
    # ===================================================
    if request.method == 'POST' and 'add_user' in request.form:
        ho_ten = request.form.get('ho_ten', '').strip()
        email = request.form.get('email', '').strip().lower()
        mat_khau = request.form.get('mat_khau', '').strip()
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh') or None
        dien_thoai = request.form.get('dien_thoai')
        dia_chi = request.form.get('dia_chi')

        # Ki·ªÉm tra tr√πng email
        cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Email = ?", (email,))
        if cur.fetchone()[0] > 0:
            flash("‚ö†Ô∏è Email n√†y ƒë√£ t·ªìn t·∫°i!", "warning")
        else:
            cur.execute("""
                INSERT INTO NguoiDung (HoTen, Email, MatKhau, Role, NgaySinh, GioiTinh, DienThoai, DiaChi)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (ho_ten, email, mat_khau, role_type, ngay_sinh, gioi_tinh, dien_thoai, dia_chi))
            conn.commit()
            flash(f"‚úÖ Th√™m {title_map[role_type]} m·ªõi th√†nh c√¥ng!", "success")

    # ===================================================
    # ‚úèÔ∏è S·ª¨A NG∆Ø·ªúI D√ôNG
    # ===================================================
    elif request.method == 'POST' and 'edit_user' in request.form:
        id = request.form.get('id')
        ho_ten = request.form.get('ho_ten', '').strip()
        gioi_tinh = request.form.get('gioi_tinh')
        ngay_sinh = request.form.get('ngay_sinh') or None
        email = request.form.get('email', '').strip().lower()
        mat_khau = request.form.get('mat_khau', '').strip()
        dien_thoai = request.form.get('dien_thoai')
        dia_chi = request.form.get('dia_chi')

        if not mat_khau:
            cur.execute("""
                UPDATE NguoiDung
                SET HoTen=?, GioiTinh=?, NgaySinh=?, Email=?, DienThoai=?, DiaChi=?
                WHERE ID=? AND Role=?
            """, (ho_ten, gioi_tinh, ngay_sinh, email, dien_thoai, dia_chi, id, role_type))
        else:
            cur.execute("""
                UPDATE NguoiDung
                SET HoTen=?, GioiTinh=?, NgaySinh=?, Email=?, MatKhau=?, DienThoai=?, DiaChi=?
                WHERE ID=? AND Role=?
            """, (ho_ten, gioi_tinh, ngay_sinh, email, mat_khau, dien_thoai, dia_chi, id, role_type))
        conn.commit()
        flash(f"‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin {title_map[role_type]} th√†nh c√¥ng!", "success")

    # ===================================================
    # üóëÔ∏è X√ìA NG∆Ø·ªúI D√ôNG
    # ===================================================
    elif request.method == 'POST' and 'delete_user' in request.form:
        id = request.form.get('id')
        cur.execute("DELETE FROM NguoiDung WHERE ID=? AND Role=?", (id, role_type))
        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a {title_map[role_type]} kh·ªèi h·ªá th·ªëng!", "success")

    # ===================================================
    # üìã DANH S√ÅCH NG∆Ø·ªúI D√ôNG
    # ===================================================
    cur.execute(f"""
        SELECT ID, HoTen, Email, GioiTinh, NgaySinh, DienThoai, DiaChi, NgayTao
        FROM NguoiDung
        WHERE Role=?
        ORDER BY NgayTao DESC
    """, (role_type,))
    users = cur.fetchall()

    # Chuy·ªÉn ng√†y sang ki·ªÉu datetime
    for u in users:
        if hasattr(u, 'NgaySinh') and isinstance(u.NgaySinh, str):
            try:
                u.NgaySinh = datetime.datetime.strptime(u.NgaySinh.split(" ")[0], "%Y-%m-%d")
            except:
                u.NgaySinh = None
        if hasattr(u, 'NgayTao') and isinstance(u.NgayTao, str):
            try:
                u.NgayTao = datetime.datetime.strptime(u.NgayTao.split(" ")[0], "%Y-%m-%d")
            except:
                u.NgayTao = None

    conn.close()

    return render_template('admin_users.html',
                           users=users,
                           role_type=role_type,
                           page_title=page_title)


# ==========================================
# üìä XU·∫§T FILE EXCEL TH·ªêNG K√ä H·ªÜ TH·ªêNG - N√¢ng c·∫•p chuy√™n nghi·ªáp
# ==========================================
@app.route('/export_admin_stats', methods=['POST'])
def export_admin_stats():
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from openpyxl.chart import PieChart, BarChart, LineChart, Reference
    from openpyxl.utils import get_column_letter
    from io import BytesIO
    from flask import send_file
    from datetime import datetime

    conn = get_connection()
    cur = conn.cursor()

    # =============================== #
    # üì• L·∫§Y D·ªÆ LI·ªÜU T·ª™ DATABASE
    # =============================== #
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='doctor'")
    total_doctors = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM NguoiDung WHERE Role='patient'")
    total_patients = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM ChanDoan")
    total_diagnoses = cur.fetchone()[0]

    cur.execute("""
        SELECT NguyCo, COUNT(*) AS SoLuong
        FROM ChanDoan
        GROUP BY NguyCo
    """)
    risk_data = cur.fetchall()

    cur.execute("""
        SELECT TOP 5 bs.HoTen, COUNT(cd.ID) AS SoCa
        FROM ChanDoan cd
        JOIN NguoiDung bs ON cd.BacSiID = bs.ID
        GROUP BY bs.HoTen
        ORDER BY SoCa DESC
    """)
    top_doctors = cur.fetchall()

    cur.execute("""
        SELECT ND.HoTen AS BacSi,
               COUNT(CD.ID) AS SoCa,
               SUM(CASE WHEN CD.NguyCo LIKE '%cao%' THEN 1 ELSE 0 END)*100.0/COUNT(*) AS TyLeCao
        FROM ChanDoan CD
        JOIN NguoiDung ND ON CD.BacSiID = ND.ID
        GROUP BY ND.HoTen
        ORDER BY SoCa DESC
    """)
    perf_rows = cur.fetchall()
    conn.close()

    # =============================== #
    # üìò T·∫†O FILE EXCEL
    # =============================== #
    wb = Workbook()
    ws = wb.active
    ws.title = "T·ªïng quan h·ªá th·ªëng"

    # --- STYLE ---
    title_font = Font(size=16, bold=True, color="1F4E78")
    header_font = Font(size=12, bold=True, color="FFFFFF")
    fill_blue = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    fill_gray = PatternFill(start_color="E9ECEF", end_color="E9ECEF", fill_type="solid")
    align_center = Alignment(horizontal="center", vertical="center")
    border = Border(
        left=Side(style="thin", color="999999"),
        right=Side(style="thin", color="999999"),
        top=Side(style="thin", color="999999"),
        bottom=Side(style="thin", color="999999")
    )

    # =============================== #
    # üìÑ SHEET 1: T·ªîNG QUAN
    # =============================== #
    ws.merge_cells("A1:E1")
    ws["A1"] = "B√ÅO C√ÅO TH·ªêNG K√ä H·ªÜ TH·ªêNG CH·∫®N ƒêO√ÅN TIM M·∫†CH"
    ws["A1"].font = title_font
    ws["A1"].alignment = align_center

    ws.append([])
    ws.append(["Ng√†y xu·∫•t b√°o c√°o:", datetime.now().strftime("%d/%m/%Y %H:%M")])
    ws.append(["Ng∆∞·ªùi xu·∫•t:", session.get('user', 'Qu·∫£n tr·ªã vi√™n')])
    ws.append([])
    ws.append(["üìä Ch·ªâ s·ªë t·ªïng quan"])
    ws.append(["T·ªïng s·ªë b√°c sƒ©", total_doctors])
    ws.append(["T·ªïng s·ªë b·ªánh nh√¢n", total_patients])
    ws.append(["T·ªïng l∆∞·ª£t ch·∫©n ƒëo√°n", total_diagnoses])
    ws.append([])

    ws.append(["üèÜ Top 5 b√°c sƒ© c√≥ s·ªë ca ch·∫©n ƒëo√°n nhi·ªÅu nh·∫•t"])
    ws.append(["T√™n b√°c sƒ©", "S·ªë ca"])
    for cell in ws[ws.max_row]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border

    for idx, d in enumerate(top_doctors, start=1):
        ws.append([d.HoTen, d.SoCa])
        for cell in ws[ws.max_row]:
            cell.border = border
            if idx % 2 == 0:
                cell.fill = fill_gray

    ws.column_dimensions["A"].width = 40
    ws.column_dimensions["B"].width = 20

    # =============================== #
    # üìä SHEET 2: T·ª∂ L·ªÜ B√ÅC Sƒ® / B·ªÜNH NH√ÇN
    # =============================== #
    ws2 = wb.create_sheet("B√°c sƒ© - B·ªánh nh√¢n")
    ws2.append(["Lo·∫°i t√†i kho·∫£n", "S·ªë l∆∞·ª£ng"])
    ws2.append(["B√°c sƒ©", total_doctors])
    ws2.append(["B·ªánh nh√¢n", total_patients])

    for cell in ws2[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border
    for row in ws2.iter_rows(min_row=2, max_col=2):
        for c in row:
            c.border = border
            c.alignment = align_center

    from openpyxl.chart.label import DataLabelList

    pie = PieChart()
    pie.title = "T·ª∑ l·ªá B√°c sƒ© / B·ªánh nh√¢n"
    data = Reference(ws2, min_col=2, min_row=1, max_row=3)
    labels = Reference(ws2, min_col=1, min_row=2, max_row=3)
    pie.add_data(data, titles_from_data=True)
    pie.set_categories(labels)

    # ‚úÖ Hi·ªÉn th·ªã gi√° tr·ªã + ph·∫ßn trƒÉm + t√™n
    pie.dLbls = DataLabelList()
    pie.dLbls.showVal = True
    pie.dLbls.showPercent = True
    pie.dLbls.showCatName = True

    ws2.add_chart(pie, "D5")


    # =============================== #
    # üìä SHEET 3: T·ª∂ L·ªÜ NGUY C∆†
    # =============================== #
    ws3 = wb.create_sheet("Nguy c∆° cao - th·∫•p")
    ws3.append(["M·ª©c nguy c∆°", "S·ªë l∆∞·ª£ng"])
    for r in risk_data:
        ws3.append([r.NguyCo, r.SoLuong])

    for cell in ws3[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border

    bar = BarChart()
    bar.title = "T·ª∑ l·ªá nguy c∆° cao / th·∫•p"
    data = Reference(ws3, min_col=2, min_row=1, max_row=ws3.max_row)
    cats = Reference(ws3, min_col=1, min_row=2, max_row=ws3.max_row)
    bar.add_data(data, titles_from_data=True)
    bar.set_categories(cats)
    bar.y_axis.title = "S·ªë l∆∞·ª£ng"
    ws3.add_chart(bar, "E5")

    # =============================== #
    # üìä SHEET 4: HI·ªÜU SU·∫§T B√ÅC Sƒ®
    # =============================== #
    ws4 = wb.create_sheet("Hi·ªáu su·∫•t b√°c sƒ©")
    ws4.append(["B√°c sƒ©", "S·ªë ca", "T·ª∑ l·ªá nguy c∆° cao (%)"])
    for p in perf_rows:
        ws4.append([p.BacSi, p.SoCa, round(p.TyLeCao or 0, 1)])

    for cell in ws4[1]:
        cell.font = header_font
        cell.fill = fill_blue
        cell.alignment = align_center
        cell.border = border

    for row in ws4.iter_rows(min_row=2, max_col=3):
        for cell in row:
            cell.border = border
            if row[0].row % 2 == 0:
                cell.fill = fill_gray
            cell.alignment = align_center

    # --- Bi·ªÉu ƒë·ªì k·∫øt h·ª£p ---
    chart = BarChart()
    chart.title = "Hi·ªáu su·∫•t & T·ª∑ l·ªá nguy c∆° cao c·ªßa b√°c sƒ©"
    chart.y_axis.title = "S·ªë ca"
    data_bar = Reference(ws4, min_col=2, min_row=1, max_row=ws4.max_row)
    cats = Reference(ws4, min_col=1, min_row=2, max_row=ws4.max_row)
    chart.add_data(data_bar, titles_from_data=True)
    chart.set_categories(cats)

    line = LineChart()
    data_line = Reference(ws4, min_col=3, min_row=1, max_row=ws4.max_row)
    line.add_data(data_line, titles_from_data=True)
    line.y_axis.title = "T·ª∑ l·ªá (%)"
    line.y_axis.axId = 200
    chart.y_axis.crosses = "max"
    chart += line
    ws4.add_chart(chart, "E5")

    # =============================== #
    # üìä SHEET 5: GHI CH√ö & CH·ªÆ K√ù
    # =============================== #
    ws5 = wb.create_sheet("Ghi ch√∫ & Ch·ªØ k√Ω")
    ws5["A1"] = "Ghi ch√∫:"
    ws5["A2"] = "‚Ä¢ B√°o c√°o ƒë∆∞·ª£c xu·∫•t t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng CVD-App."
    ws5["A3"] = "‚Ä¢ D·ªØ li·ªáu c·∫≠p nh·∫≠t ƒë·∫øn th·ªùi ƒëi·ªÉm xu·∫•t file."
    ws5["A5"] = "Ng∆∞·ªùi l·∫≠p b√°o c√°o:"
    ws5["A6"] = session.get('user', 'Qu·∫£n tr·ªã vi√™n')
    ws5["A8"] = "Ch·ªØ k√Ω:"
    ws5["A9"] = "____________________________"

    ws5["A1"].font = Font(bold=True, color="1F4E78", size=13)
    ws5.column_dimensions["A"].width = 70

    # =============================== #
    # üíæ XU·∫§T FILE EXCEL
    # =============================== #
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    filename = f"ThongKe_CVDApp_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"

    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )


# ==========================================
# üåø Trang Ki·∫øn th·ª©c Y h·ªçc (cho b·ªánh nh√¢n)
# ==========================================
@app.route('/tips')
def tips():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    # Ch·ªâ cho ph√©p b·ªánh nh√¢n xem
    if session.get('role') != 'patient':
        flash("Ch·ªâ b·ªánh nh√¢n m·ªõi ƒë∆∞·ª£c truy c·∫≠p trang n√†y.", "warning")
        return redirect(url_for('home'))
    
    return render_template('tips.html')

# ============================================
# ü§ñ API CHAT AI (AJAX) ‚Äî N√¢ng c·∫•p chuy√™n nghi·ªáp
# ============================================
@app.route('/chat_ai_api', methods=['POST'])
def chat_ai_api():
    if 'user' not in session or session.get('role') != 'patient':
        return jsonify({'reply': '‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.'}), 403

    import google.generativeai as genai
    from datetime import datetime
    from flask import jsonify

    data = request.get_json()
    msg = data.get('message', '').strip()
    if not msg:
        return jsonify({'reply': 'üìù Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n.'})

    try:
        # --- C·∫•u h√¨nh model (ƒë√£ c·∫•u h√¨nh s·∫µn API KEY ·ªü ƒë·∫ßu file) ---
        model = genai.GenerativeModel(MODEL_NAME)

        # --- Prompt chuy√™n nghi·ªáp ---
        prompt = f"""
        B·∫°n l√† **Tr·ª£ l√Ω y t·∫ø ·∫£o CVD-AI**, chuy√™n t∆∞ v·∫•n v·ªÅ **b·ªánh tim m·∫°ch, huy·∫øt √°p, ti·ªÉu ƒë∆∞·ªùng, l·ªëi s·ªëng l√†nh m·∫°nh**.
        - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ hi·ªÉu, d√πng ti·∫øng Vi·ªát t·ª± nhi√™n.
        - Gi·ªØ gi·ªçng vƒÉn **th√¢n thi·ªán, chuy√™n nghi·ªáp**, tr√°nh d√πng t·ª´ ng·ªØ ph·ª©c t·∫°p y h·ªçc.
        - N·∫øu c√¢u h·ªèi ngo√†i ch·ªß ƒë·ªÅ s·ª©c kh·ªèe, h√£y n√≥i nh·∫π nh√†ng: 
          ‚ÄúXin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ s·ª©c kh·ªèe v√† tim m·∫°ch th√¥i nh√© ‚Äù.
        - C√≥ th·ªÉ chia c√¢u tr·∫£ l·ªùi th√†nh 2-3 ƒëo·∫°n r√µ r√†ng.
        - N·∫øu li√™n quan ƒë·∫øn th√≥i quen, g·ª£i √Ω **th·ª±c h√†nh c·ª• th·ªÉ** (v√≠ d·ª•: ‚ÄúN√™n t·∫≠p th·ªÉ d·ª•c 30 ph√∫t m·ªói ng√†y‚Äù).
        - Kh√¥ng d√πng markdown n·∫∑ng (ch·ªâ g·∫°ch ƒë·∫ßu d√≤ng, emoji nh·∫π).
        
        üì© C√¢u h·ªèi t·ª´ b·ªánh nh√¢n: 
        {msg}
        """

        # --- G·ªçi Gemini API ---
        response = model.generate_content(prompt)

        answer = response.text.strip() if response and response.text else (
            "ü§î Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t l·∫°i ƒë∆∞·ª£c kh√¥ng?"
        )

        # --- L√†m ƒë·∫πp ph·∫£n h·ªìi: x·ª≠ l√Ω format nh·∫π ---
        formatted_answer = (
            answer.replace("**", "")  # b·ªè markdown ƒë·∫≠m
                  .replace("* ", "‚Ä¢ ")  # thay bullet
                  .replace("#", "")
        )

        # --- L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu ---
        user_id = session.get('user_id')
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO TinNhanAI (BenhNhanID, NoiDung, PhanHoi, ThoiGian)
            VALUES (?, ?, ?, ?)
        """, (user_id, msg, formatted_answer, datetime.now()))
        conn.commit()
        conn.close()

        # --- Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho giao di·ªán ---
        return jsonify({'reply': formatted_answer})

    except Exception as e:
        print("‚ö†Ô∏è L·ªói Gemini AI:", e)
        return jsonify({
            'reply': 'üö´ H·ªá th·ªëng AI ƒëang b·∫≠n ho·∫∑c k·∫øt n·ªëi kh√¥ng ·ªïn ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.'
        })
# ==========================================
# üìú API l·∫•y l·ªãch s·ª≠ chat AI c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
# ==========================================
@app.route('/chat_ai_history', methods=['GET'])
def chat_ai_history():
    if 'user' not in session or session.get('role') != 'patient':
        return jsonify({'messages': []}), 403

    user_id = session['user_id']
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT NoiDung, PhanHoi, FORMAT(ThoiGian, 'HH:mm dd/MM') AS ThoiGian
        FROM TinNhanAI
        WHERE BenhNhanID = ?
        ORDER BY ThoiGian
    """, (user_id,))
    rows = cur.fetchall()
    conn.close()

    messages = [
        {'user': r.NoiDung, 'ai': r.PhanHoi, 'time': r.ThoiGian}
        for r in rows
    ]
    return jsonify({'messages': messages})

# ==========================================
# Main
# ==========================================
if __name__ == '__main__':
    app.run(debug=True)
